
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" >
<HTML>
  <HEAD>
    <title>Recommended book: Perl Medic : Transforming Legacy Code
    </title>
    <meta content="JavaScript" name="vs_defaultClientScript">
    <meta content="http://schemas.microsoft.com/intellisense/ie5" name="vs_targetSchema">
    <LINK href="global.css" type="text/css" rel="stylesheet">
  </HEAD>
  <body MS_POSITIONING="GridLayout">
    <a href="Default.aspx">
      <img id="Image2" class="Logo" src="images/logo.png" alt="iunknown.com: building better software, faster" border="0" /></a>
    <form name="Form1" method="post" action="BookReview.aspx?asin=0201795264" id="Form1">
<input type="hidden" name="__VIEWSTATE" value="dDwxNzczMTIwMDYzO3Q8O2w8aTwxPjs+O2w8dDw7bDxpPDE+O2k8Mz47aTw1PjtpPDc+O2k8OT47aTwxMT47aTwxMz47aTwxND47aTwxNz47PjtsPHQ8cDxwPGw8SW1hZ2VVcmw7PjtsPGh0dHA6Ly9pbWFnZXMuYW1hem9uLmNvbS9pbWFnZXMvUC8wMjAxNzk1MjY0LjAxLl9TQ01aWlpaWlpaXy5qcGc7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPFBlcmwgTWVkaWMgOiBUcmFuc2Zvcm1pbmcgTGVnYWN5IENvZGU7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPFBldGVyIEouIFNjb3R0Oz4+Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDwkMzQuOTk7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPCQyMy4wOTs+Pjs+Ozs+O3Q8cDxwPGw8VGV4dDs+O2w8NS4wOz4+Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDw1Oz4+Oz47Oz47dDxAPGh0dHA6Ly93d3cuYW1hem9uLmNvbS9leGVjL29iaWRvcy9BU0lOLzAyMDE3OTUyNjQvcmVmPW5vc2ltL2l1bmtub3duY29tLTIwOz47Oz47dDw7bDxpPDA+O2k8MT47PjtsPHQ8QDxBbWF6b24uY29tOz47Oz47dDxwPHA8bDxUZXh0Oz47bDxQZXJsIHJhbmtzIGFtb25nIGhhY2tlcnMnIGZhdm9yaXRlIGxhbmd1YWdlcy0tdGhlcmUncyBhbHdheXMgYW5vdGhlciBhcHByb2FjaCB0byBhIHByb2JsZW0sIGFsd2F5cyBvcHRpbWl6YXRpb24gdG8gYmUgZG9uZSwgYW5kIGZvcmV2ZXIgbmV3IHRlY2huaXF1ZXMgdG8gdHJ5LiBQZXJsJ3MgYSBob290LiBCdXQgdGhlIGN1bHR1cmUgb2YgdGlua2VyaW5nIHRoYXQgc3Vycm91bmRzIFBlcmwgaGFzIHJlc3VsdGVkIGluIGEgbGFyZ2UgYm9keSBvZiBoYXJkLXRvLXVuZGVyc3RhbmQgbGVnYWN5IGNvZGUuIFRoYXQgbGVnYWN5IGNvZGUgaGFzIHRvIGJlIG1haW50YWluZWQsIGV4dGVuZGVkLCBhbmQgYWRhcHRlZCB0byBuZXcgY29uZGl0aW9ucy0tb2Z0ZW4gd2l0aG91dCB0aGUgaGVscCBvZiB0aGUgcGVyc29uIHdobyBvcmlnaW5hbGx5IGNyZWF0ZWQgaXQuIFw8SVw+UGVybCBNZWRpY1w8L0lcPiBjb25zaWRlcnMgUGVybCBmcm9tIHRoZSBwZXJzcGVjdGl2ZSBvZiBhIHByb2dyYW1tZXIgbG9va2luZyBhdCBjb2RlIHdyaXR0ZW4gYnkgc29tZW9uZSBlbHNlIGFuZCB0cnlpbmcgdG8gYW5zd2VyIHRoZSBhbmNpZW50IHF1ZXN0aW9uOiAiV2hhdCB3ZXJlIHRoZXkgdGhpbmtpbmc/Ilw8cFw+ICBJdCdzIGEgY3JlYXRpdmUgYXBwcm9hY2gsIGFuZCBvbmUgdGhhdCBtYWtlcyBnb29kIHJlYWRpbmcgZm9yIHNvbWVvbmUgd2VsbC12ZXJzZWQgaW4gUGVybCBwcm9ncmFtbWluZyAoYXV0aG9yIFBldGVyIFNjb3R0IG1ha2VzIHRoZSBhbmFsb2d5IG9mIGJlY29taW5nIGZsdWVudCBpbiBhIGh1bWFuIGxhbmd1YWdlLCBzdWNoIGFzIEZyZW5jaCwgdGhlbiBzdHVkeWluZyBpdHMgdmFyaW91cyBhY2NlbnRzIGFuZCBkaWFsZWN0cykuIEhlIHNob3dzLCBmb3IgZXhhbXBsZSwgYSBrbHVkZ3kgcGllY2Ugb2YgY29kZSB0aGF0J3MgbWVhbnQgdG8gY2F0Y2ggQ0dJIGZvcm0gdXBsb2FkcywgdGhlbiBpbmRpY2F0ZXMgdGhhdCB0aGUgb2J2aW91cyByZXBsYWNlbWVudCBpcyB0aGUgQ0dJLnBtIG1vZHVsZS4gRWxzZXdoZXJlLCBTY290dCBzaG93cyB3aHkgc3ltYm9saWMgcmVmZXJlbmNlcyBhcmUgYmFkLCBhbmQgaG93IHRvIGF2b2lkIHRoZW0gYnkgbWVhbnMgb2YgaGFzaGVzLiBTb21lIG9mIHRoZSB2YWx1ZSBpbiB0aGlzIGJvb2sgaXMgaW4gdGhlIGZvcm0gb2YgZG9jdW1lbnRhdGlvbiBvZiB0aGUgZGlmZmVyZW5jZXMgYW1vbmcgUGVybCB2ZXJzaW9uc1w7IG90aGVyIHVzZWZ1bCBjb3ZlcmFnZSBkZWFscyB3aXRoIHdhcm5pbmdzIGFuZCBzdHJpY3RuZXNzIGNvbnRyb2wgYXMgZGVidWdnaW5nIHRvb2xzLiBSZWFkIHRoaXMgc3RyYWlnaHQgdGhyb3VnaCB0byBpbXByb3ZlIHlvdXIgb3duIGNvZGVcOyB1c2UgdGhlIGluZGV4IHRvIGhlbHAgZGVjaXBoZXIgYW5kIGltcHJvdmUgd2hhdCBzb21lb25lIGVsc2UgaGFzIHdyaXR0ZW4uIFw8SVw+LS1EYXZpZCBXYWxsXDwvSVw+XDxwXD4gIFw8Qlw+VG9waWNzIGNvdmVyZWRcPC9CXD46IEhvdyB0byB3cml0ZSBnb29kIFBlcmwgY29kZSwgcmVhZCBiYWQgUGVybCBjb2RlLCBhbmQgY29udmVydCBiYWQgUGVybCBjb2RlIGludG8gZ29vZCBpbiBsZXNzIHRpbWUgdGhhdCB3b3VsZCBiZSByZXF1aXJlZCB0byB3cml0ZSBhbiBlcXVpdmFsZW50IHJlcGxhY2VtZW50IHByb2dyYW0gZnJvbSBzY3JhdGNoLiBUZXN0aW5nLCBkZWJ1Z2dpbmcsIGRvY3VtZW50aW5nLCByZXBsYWNpbmcgY3VzdG9tIGNvZGUgd2l0aCBDUEFOIG1vZHVsZXMsIGFuZCBlbWJyYWNpbmcgZmVhdHVyZXMgdGhhdCBiZWNhbWUgYXZhaWxhYmxlIGluIGxhdGVyIHZlcnNpb25zIG9mIFBlcmwgYXJlIGFsbCBjb3ZlcmVkLiBPdmVyYWxsLCB0aGUgYXV0aG9yIGVuZG9yc2VzIGFuZCBnZW5lcmFsbHkgZXhwbGFpbnMgdGhlIHByaW5jaXBsZXMgb2YgRXh0cmVtZSBQcm9ncmFtbWluZyAoWFApIGZvciBQZXJsIHdvcmsuOz4+Oz47Oz47Pj47Pj47Pj47PlLLhd3PXHM3AN1KkuOwGU1njvgW" />

      <div class="BookReview"><img id="BookImage" class="BookReviewImage" src="http://images.amazon.com/images/P/0201795264.01._SCMZZZZZZZ_.jpg" alt="" border="0" />
        <span id="BookReviewTitle" class="BookReviewTitle">Perl Medic : Transforming Legacy Code</span>
        <div class="ItemDetail">By
          <span id="Authors">Peter J. Scott</span></div>
        <div class="ItemDetail">
          <span class="ItemCaption">List price:</span>
          <span id="ListPrice" class="ListPrice">$34.99</span>
          <span class="ItemCaption">Our price:</span>
          <span id="OurPrice" class="OurPrice">$23.09</span>
        </div>
        <div class="ItemDetail">
          <span class="ItemCaption">Average customer review:</span>
          <span id="AverageReview">5.0</span>
          based on
          <span id="TotalReviews">5</span>
          reviews.
        </div>
        <div class="BuyButton">
          <a href='http://www.amazon.com/exec/obidos/ASIN/0201795264/ref=nosim/iunknowncom-20'>
            <img id="Image1" src="Images/buy_from_amazon.gif" alt="" border="0" /></a>
        </div>
        <table class="ReviewBody">
          <tr>
            <td class="ReviewColumn">
              <table id="EditorialReviewsPanel" class="ReviewSection" cellpadding="0" cellspacing="0" border="0" width="100%"><tr><td>
	
                <DIV class="ReviewHeading">Amazon.com:</DIV>
                <span id="Label1">Perl ranks among hackers' favorite languages--there's always another approach to a problem, always optimization to be done, and forever new techniques to try. Perl's a hoot. But the culture of tinkering that surrounds Perl has resulted in a large body of hard-to-understand legacy code. That legacy code has to be maintained, extended, and adapted to new conditions--often without the help of the person who originally created it. <I>Perl Medic</I> considers Perl from the perspective of a programmer looking at code written by someone else and trying to answer the ancient question: "What were they thinking?"<p>  It's a creative approach, and one that makes good reading for someone well-versed in Perl programming (author Peter Scott makes the analogy of becoming fluent in a human language, such as French, then studying its various accents and dialects). He shows, for example, a kludgy piece of code that's meant to catch CGI form uploads, then indicates that the obvious replacement is the CGI.pm module. Elsewhere, Scott shows why symbolic references are bad, and how to avoid them by means of hashes. Some of the value in this book is in the form of documentation of the differences among Perl versions; other useful coverage deals with warnings and strictness control as debugging tools. Read this straight through to improve your own code; use the index to help decipher and improve what someone else has written. <I>--David Wall</I><p>  <B>Topics covered</B>: How to write good Perl code, read bad Perl code, and convert bad Perl code into good in less time that would be required to write an equivalent replacement program from scratch. Testing, debugging, documenting, replacing custom code with CPAN modules, and embracing features that became available in later versions of Perl are all covered. Overall, the author endorses and generally explains the principles of Extreme Programming (XP) for Perl work.</span>
              
</td></tr></table>
              <table id="CustomerReviewsPanel" class="ReviewSection" cellpadding="0" cellspacing="0" border="0" width="100%"><tr><td>
	
                <DIV class="ReviewHeading">Customer reviews:</DIV>
                
                    <div class="CustomerReviewSummary">One of the best Perl books out there</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>1</span>
                      /
                      <span>1</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-06-24</span>
                    </div>
                    <span>A quote on the front cover of this book says "if you code in Perl then you need to read this book". That's a pretty bold claim to make. It made me think of the hyperbole on covers of books that claim to teach you to program in Perl in just a few days. But this book is published by Addison Wesley, who are a well respected technical publisher of technical books and the quote is from Adam Turoff who certainly knows what he's talking about when it comes to Perl programming. So in this case the claim isn't hyperbole. The book really is one that I want every Perl programmer to read.<P>Perl gets a lot of bad press from people who claim that it encourages people to write unreadable code. Whilst there's certainly a lot of very bad Perl code out there I think that's more a sign that it's used by a lot of people who don't know how to program than a reflection on the language itself. And that's where this book comes in. It assumes that you are familiar with the syntax of Perl but that you've never really been shown how to use it effectively. Which is a situation that many Perl programmers find themselves in.<P>Perl Medic is actually targetted at people who have to maintain older Perl code written by someone else, but I think that the information it contains is just as useful to anyone coding in Perl. Peter Scott has a lot of experience in writing Perl and in training other people to write Perl and the distillation of that experience and knowledge into these 300-odd pages mean that there are few Perl programmers who won't pick up something useful from this book.<P>The main emphasis in the book is on increasing the maintainability of code. The techniques are wide-ranging. I particularly enjoyed the examples of refactoring programs and the coverage of using modules from CPAN. Two other very good sections are the one on antipatterns in chapter 4 and the one on cargo cult programming in chapter 6. Together these sections give a programmer a number of easy to recognise quick wins when improving existing code and a checklist of things not to do when writing new code.<P>There are a couple of niggles. I've already mentioned that I think the book has been slightly mis-targetted and that it should have been aimed at anyone writing Perl code. The other problem that I had was that the medic analogy that runs through the book gets a bit strained at times. But these are only minor and they shouldn't prevent you from adding this book to your library.<P>In fact, all in all, the quote on the front cover is pretty accurate.</span>
                  
                    <div class="CustomerReviewSummary">This is a very good book</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>0</span>
                      /
                      <span>0</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-05-26</span>
                    </div>
                    <span>The book is supposedly about "transforming legacy code," but what it teaches is actually much broader. It demonstrates a set of "best practices" for creating and maintaining large Perl projects, and it explains very clearly why these practices are best, and how they will benefit your project.<P>Because it is well written and well considered-- and above all, practical-- you will put much of what you learn to work right away.<P>Of particular interest are the chapters on testing (Chapter 3) and using CPAN modules (Chapters 8 and 9). The author spends quite a few pages explaining Perl's Test modules and demonstrating how to use them. This chapter alone is worth the price of the book, and will save you hours (or days) of debugging time.<P>The chapters on CPAN modules are equally useful because they point out some of the freely available modules that can save you a considerable amount of development time. The author takes the time to explain what each module can do, and in some cases gives examples of how to use them. <P>Chapter 9 describes modules that may be particularly useful during development, including modules for explaining regular expressions, benchmarking and profiling code, and finding dead code.<P>Other interesting chapters include:<P>- the opening chapter of the book, which lays out a plan of action for working with other programmers within an organization when you have inherited a mess of legacy code.<P>- a chapter that details specific changes between different versions of Perl, so that you can know exactly when certain features became a part of the language, and exactly which constructs, pragmas, etc. will work (or not work) with each version of Perl<P>Most of the book describes how to apply good programming practices within the Perl language: encapsulation, modularity, maintainability, clarity of style and efficiency of code. Perl includes pragmas, modules, and mechanisms to support these practices, though you may not have known this from reading the usual Perl books.<P>Overall, this book is very useful for intermediate to advanced Perl programmers, for anyone having to maintain legacy Perl code, and for anyone considering writing Perl applications of even moderate complexity.</span>
                  
                    <div class="CustomerReviewSummary">A good book with a misleading title</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>0</span>
                      /
                      <span>0</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-05-18</span>
                    </div>
                    <span>While the "medic" metaphor recurs throughout the book, most of the material isn't directly related to repairing old code. Instead, this is a collection of best practices for new code. (The author recommends rewriting existing code if at all possible.) It ends up resembling another excellent Perl title, Joseph Hall's Effective Perl Programming. Good company to keep. Perl Medic has the advantage of being newer, and of covering a bit more material. The writing style is very easy to read, and the order of presentation works well. An excellent title for any intermediate-level Perl programmer.</span>
                  
                    <div class="CustomerReviewSummary">One of the best Perl Books out there</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>2</span>
                      /
                      <span>2</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-04-24</span>
                    </div>
                    <span>A quote on the front cover of this book says "if you code in Perl then you need to read this book". That's a pretty bold claim to make. It made me think of the hyperbole on covers of books that claim to teach you to program in Perl in just a few days. But this book is published by Addison Wesley, who are a well respected technical publisher of technical books and the quote is from Adam Turoff who certainly knows what he's talking about when it comes to Perl programming. So in this case the claim isn't hyperbole. The book really is one that I want every Perl programmer to read.<P>Perl gets a lot of bad press from people who claim that it encourages people to write unreadable code. Whilst there's certainly a lot of very bad Perl code out there I think that's more a sign that it's used by a lot of people who don't know how to program than a reflection on the language itself. And that's where this book comes in. It assumes that you are familiar with the syntax of Perl but that you've never really been shown how to use it effectively. Which is a situation that many Perl programmers find themselves in.<P>Perl Medic is actually targetted at people who have to maintain older Perl code written by someone else, but I think that the information it contains is just as useful to anyone coding in Perl. Peter Scott has a lot of experience in writing Perl and in training other people to write Perl and the distillation of that experience and knowledge into these 300-odd pages mean that there are few Perl programmers who won't pick up something useful from this book.<P>The main emphasis in the book is on increasing the maintainability of code. The techniques are wide-ranging. I particularly enjoyed the examples of refactoring programs and the coverage of using modules from CPAN. Two other very good sections are the one on antipatterns in chapter 4 and the one on cargo cult programming in chapter 6. Together these sections give a programmer a number of easy to recognise quick wins when improving existing code and a checklist of things not to do when writing new code.<P>There are a couple of niggles. I've already mentioned that I think the book has been slightly mis-targetted and that it should have been aimed at anyone writing Perl code. The other problem that I had was that the medic analogy that runs through the book gets a bit strained at times. But these are only minor and they shouldn't prevent you from adding this book to your library.<P>In fact, all in all, the quote on the front cover is pretty accurate.</span>
                  
                    <div class="CustomerReviewSummary">Novel and effective tutorial in solid Perl Programming</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>11</span>
                      /
                      <span>11</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-03-18</span>
                    </div>
                    <span>You can learn a lot from books (or so it seems), but you can't learn a feel for the language. I had read all of the O'Reily Perl books and found myself in charge of a large Perl project writing new code. I hired on a real Perl guru and he taught me a ton, in person, about how to write Perl as Perl and do it well. What amazes me about Perl Medic is how much of what the Perl guru taught me is in this book. It's as if I had the man by my side again.<P>On it's face that makes it sound like you should pick up the book immediately. And for someone who is serious about Perl I think you should get this book. But there are still some faults. It could be a little better organized. And some of the common problems, like CGI scripts having embedded HTML, could be given more prominence and the text templating alternative given some more space. I looked in the tiny index for HTML::Template and found only two references, both of which were pretty short.<P>In what is probably both a curse and a blessing the book is not only about fixing legacy code. The majority of the book is about becoming a better Perl programmer and writing Perl as Perl. There are a few chapters and the beginning and end that are specifically about working with legacy code, but the majority of the book is practical insights into Perl coding styles using code fragments with effective exposition.<P>Small problems aside. This unique book is fun to read and is packed with valuable insights if you spend the time to look. The author obviously knows a lot about Perl and understands how to convey that knowledge to the reader effectively. If you are looking to maintain some Perl, or if you have hit a plateau in your understanding of Perl and you need a push to get to a higher level this book is for you.</span>
                  
              
</td></tr></table>
            </td>
            <td class="ReviewSideBar">
              <div class="ItemCaption">Customers also bought:</div>
              
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0596004761'>
                      Perl Template Toolkit
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.0 based on 1 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0201700549'>
                      Perl Debugged
                    </a>
                    <div class="SimilarItemRatings">Rating: 5.0 based on 3 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=1590593235'>
                      Randal Schwartz's Perls of Wisdom
                    </a>
                    <div class="SimilarItemRatings">Rating: 0 based on 0 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0596003137'>
                      Perl Cookbook, Second Edition
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.6 based on 87 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0596004788'>
                      Learning Perl Objects, References & Modules
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.7 based on 7 reviews</div>
                  </div>
                
              <div class="GoogleBookAd">
                <script type="text/javascript"><!--
                google_ad_client = "pub-8264790134546506";
                google_ad_width = 160;
                google_ad_height = 600;
                google_ad_format = "160x600_as";
                google_ad_channel ="4375045039";
                google_color_border = "CCCCCC";
                google_color_bg = "FFFFFF";
                google_color_link = "000000";
                google_color_url = "666666";
                google_color_text = "333333";
                //--></script>
                <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
                </script>
              </div>
            </td>
          </tr>
        </table>
      </div>
    </form>
  </body>
</HTML>
