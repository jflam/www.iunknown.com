<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />

<title>iunknown.com: Comment on Getting current method</title>

<link rel="stylesheet" href="http://www.iunknown.com/styles-site.css" type="text/css" />

<script type="text/javascript" language="javascript">
<!--

var HOST = 'www.iunknown.com';

// Copyright (c) 1996-1997 Athenia Associates.
// http://www.webreference.com/js/
// License is granted if and only if this entire
// copyright notice is included. By Tomer Shiran.

function setCookie (name, value, expires, path, domain, secure) {
    var curCookie = name + "=" + escape(value) + ((expires) ? "; expires=" + expires.toGMTString() : "") + ((path) ? "; path=" + path : "") + ((domain) ? "; domain=" + domain : "") + ((secure) ? "; secure" : "");
    document.cookie = curCookie;
}

function getCookie (name) {
    var prefix = name + '=';
    var c = document.cookie;
    var nullstring = '';
    var cookieStartIndex = c.indexOf(prefix);
    if (cookieStartIndex == -1)
        return nullstring;
    var cookieEndIndex = c.indexOf(";", cookieStartIndex + prefix.length);
    if (cookieEndIndex == -1)
        cookieEndIndex = c.length;
    return unescape(c.substring(cookieStartIndex + prefix.length, cookieEndIndex));
}

function deleteCookie (name, path, domain) {
    if (getCookie(name))
        document.cookie = name + "=" + ((path) ? "; path=" + path : "") + ((domain) ? "; domain=" + domain : "") + "; expires=Thu, 01-Jan-70 00:00:01 GMT";
}

function fixDate (date) {
    var base = new Date(0);
    var skew = base.getTime();
    if (skew > 0)
        date.setTime(date.getTime() - skew);
}

function rememberMe (f) {
    var now = new Date();
    fixDate(now);
    now.setTime(now.getTime() + 365 * 24 * 60 * 60 * 1000);
    setCookie('mtcmtauth', f.author.value, now, '', HOST, '');
    setCookie('mtcmtmail', f.email.value, now, '', HOST, '');
    setCookie('mtcmthome', f.url.value, now, '', HOST, '');
}

function forgetMe (f) {
    deleteCookie('mtcmtmail', '', HOST);
    deleteCookie('mtcmthome', '', HOST);
    deleteCookie('mtcmtauth', '', HOST);
    f.email.value = '';
    f.author.value = '';
    f.url.value = '';
}

//-->
</script>
</head>

<body>

<div id="banner-commentspop">
iunknown.com
</div>

<div class="blog">

<div class="comments-head">Comments: Getting current method</div>


<div class="comments-body">
<p>I too have been looking into obtaining the name of the current method, for tracing purposes.  Having just switched from performance driven development for Unix platforms, I was also hesitant about the impact to performance.</p>

<p>I was concerned by the effects of either instantiating a new StackFrame for each trace message or a static one for each method.  I just don't trust that the Framework would free the resources often enough for the instantiated ones, or the unknown impact of having a static StackFrame hanging around for every method entered during an applications execution.</p>

<p>I initially was going to use the following Trace messages to ease cut and paste replication:</p>

<p>Trace.WriteLine( "ENTER - " + new StackFrame().GetMethod().Name );<br />
Trace.WriteLine( "EXIT - " + new StackFrame().GetMethod().Name );</p>

<p>or</p>

<p>static StackFrame sf = new StackFrame();<br />
Trace.WriteLine( "ENTER - " + sf.GetMethod().Name );<br />
Trace.WriteLine( "EXIT - " + sf.GetMethod().Name );</p>

<p>which could also be done as</p>

<p>static string procName = new StackFrame().GetMethod().Name;<br />
Trace.WriteLine( "ENTER - " + procName);<br />
Trace.WriteLine( "EXIT - " + procName );</p>

<p><br />
Then I discovered a Static method of the MethodBase class that will retrieve the same results without instantiating new StackFrame or other objects.</p>

<p>Use the static MethodBase.GetCurrentMethod() from the System.Reflection namespace to obtain a MethodBase object for the current method.  The resulting Trace statements should be more efficient and will also add less clutter to the code:</p>

<p><br />
Trace.WriteLine("ENTER - " + MethodBase.GetCurrentMethod().Name );<br />
Trace.WriteLine("EXIT - " + MethodBase.GetCurrentMethod().Name );</p>

<p><br />
Hope this is able to help other folks out that are trying to achieve this.<br />
</p>
<span class="comments-post">Posted by Jeremy at December  3, 2003 11:04 AM</span>
</div>




</div>

</body>
</html>