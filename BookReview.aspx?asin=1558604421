
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" >
<HTML>
  <HEAD>
    <title>Recommended book: Programming Language Pragmatics
    </title>
    <meta content="JavaScript" name="vs_defaultClientScript">
    <meta content="http://schemas.microsoft.com/intellisense/ie5" name="vs_targetSchema">
    <LINK href="global.css" type="text/css" rel="stylesheet">
  </HEAD>
  <body MS_POSITIONING="GridLayout">
    <a href="Default.aspx">
      <img id="Image2" class="Logo" src="images/logo.png" alt="iunknown.com: building better software, faster" border="0" /></a>
    <form name="Form1" method="post" action="BookReview.aspx?asin=1558604421" id="Form1">
<input type="hidden" name="__VIEWSTATE" value="dDwxNzczMTIwMDYzO3Q8O2w8aTwxPjs+O2w8dDw7bDxpPDE+O2k8Mz47aTw1PjtpPDc+O2k8OT47aTwxMT47aTwxMz47aTwxND47aTwxNz47PjtsPHQ8cDxwPGw8SW1hZ2VVcmw7PjtsPGh0dHA6Ly9pbWFnZXMuYW1hem9uLmNvbS9pbWFnZXMvUC8xNTU4NjA0NDIxLjAxLl9TQ01aWlpaWlpaXy5qcGc7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPFByb2dyYW1taW5nIExhbmd1YWdlIFByYWdtYXRpY3M7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPE1pY2hhZWwgTC4gU2NvdHQ7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPCQ3NC45NTs+Pjs+Ozs+O3Q8cDxwPGw8VGV4dDs+O2w8JDc0Ljk1Oz4+Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDw1LjA7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPDEyOz4+Oz47Oz47dDxAPGh0dHA6Ly93d3cuYW1hem9uLmNvbS9leGVjL29iaWRvcy9BU0lOLzE1NTg2MDQ0MjEvcmVmPW5vc2ltL2l1bmtub3duY29tLTIwOz47Oz47dDw7bDxpPDA+O2k8MT47PjtsPHQ8QDxBbWF6b24uY29tOz47Oz47dDxwPHA8bDxUZXh0Oz47bDxBcyBhIHRleHRib29rIHN1aXRhYmxlIGZvciB0aGUgY2xhc3Nyb29tIG9yIHNlbGYtc3R1ZHksIE1pY2hhZWwgU2NvdHQncyBcPElcPlByb2dyYW1taW5nIExhbmd1YWdlIFByYWdtYXRpY3NcPC9JXD4gcHJvdmlkZXMgYSB3b3J0aHkgdG91ciBvZiB0aGUgdGhlb3J5IGFuZCBwcmFjdGljZSBvZiBob3cgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2VzIGFyZSBydW4gb24gdG9kYXkncyBjb21wdXRlcnMuIENsZWFybHkgb3JnYW5pemVkIGFuZCBmaWxsZWQgd2l0aCBhIHdpZGUtcmFuZ2luZyBwZXJzcGVjdGl2ZSBvbiBvdmVyIDQwIGRpZmZlcmVudCBsYW5ndWFnZXMsIHRoaXMgYm9vayB3aWxsIGJlIGFwcHJlY2lhdGVkIGZvciBpdHMgZGVwdGggYW5kIGJyZWFkdGggb2YgY292ZXJhZ2Ugb24gYW4gZXNzZW50aWFsIHRvcGljIGluIGNvbXB1dGVyIHNjaWVuY2UuXDxwXD4gV2l0aCByZWZlcmVuY2VzIHRvIGRvemVucyBvZiBwcm9ncmFtbWluZyBsYW5ndWFnZXMsIGZyb20gQWRhIHRvIFR1cmluZyBhbmQgZXZlcnl0aGluZyBpbiBiZXR3ZWVuIChpbmNsdWRpbmcgQywgQysrLCBKYXZhLCBhbmQgUGVybCksIHRoaXMgYm9vayBpcyBhIHRydWx5IGluLWRlcHRoIGd1aWRlIHRvIGhvdyBjb2RlIGlzIGNvbXBpbGVkIChvciBpbnRlcnByZXRlZCkgYW5kIGV4ZWN1dGVkIG9uIGNvbXB1dGVyIGhhcmR3YXJlLiBFYXJseSBjaGFwdGVycyB0ZW5kIHRvIGJlIHNsaWdodGx5IG1vcmUgdGhlb3JldGljYWwgKHdpdGggY292ZXJhZ2Ugb2YgcmVndWxhciBleHByZXNzaW9ucyBhbmQgY29udGV4dC1mcmVlIGdyYW1tYXJzKSBhbmQgd2lsbCBiZSBtb3N0IHZhbHVhYmxlIHRvIHRoZSBjb21wdXRlciBzY2llbmNlIHN0dWRlbnQsIGJ1dCBtdWNoIG9mIHRoaXMgYm9vayBpcyBhY2Nlc3NpYmxlIHRvIGFueW9uZSBzZWVraW5nIHRvIHdpZGVuIHRoZWlyIGtub3dsZWRnZSAoZXNwZWNpYWxseSBzaW5jZSByZWNlbnQgc3RhbmRhcmRzIHN1cnJvdW5kaW5nIFhNTCBtYWtlIHVzZSBvZiBzb21lIG9mIHRoZSBzYW1lIHZvY2FidWxhcnkgcHJlc2VudGVkIGhlcmUpLlw8cFw+IFRoZSBib29rIGhhcyBhIGNvbXByZWhlbnNpdmUgZGlzY3Vzc2lvbiBvZiBjb21waWxhdGlvbiBhbmQgbGlua2luZywgYXMgd2VsbCBhcyBob3cgZGF0YSB0eXBlcyBhcmUgaW1wbGVtZW50ZWQgaW4gbWVtb3J5LiBTZWN0aW9ucyBvbiBmdW5jdGlvbmFsIGFuZCBsb2dpY2FsIHByb2dyYW1taW5nIChpbGx1c3RyYXRlZCB3aXRoIFNjaGVtZSBhbmQgUHJvbG9nLCB3aGljaCBhcmUgb2Z0ZW4gdXNlZCBpbiBBSSByZXNlYXJjaCkgY2FuIGV4cGFuZCB5b3VyIHVuZGVyc3RhbmRpbmcgb2YgaG93IHByb2dyYW1taW5nIGxhbmd1YWdlcyB3b3JrLiBGaW5hbCBzZWN0aW9ucyBvbiB0aGUgYWR2YW50YWdlcy0tYW5kIGNvbXBsZXhpdGllcy0tb2YgY29uY3VycmVudCBwcm9jZXNzaW5nLCBwbHVzIGEgbmljZSB0cmVhdG1lbnQgb2YgY29kZSBvcHRpbWl6YXRpb24gdGVjaG5pcXVlcywgcm91bmQgb3V0IHRoZSB0ZXh0IGhlcmUuIEVhY2ggY2hhcHRlciBwcm92aWRlcyBudW1lcm91cyBleGVyY2lzZXMsIHNvIHlvdSBjYW4gdHJ5IG91dCB0aGUgaWRlYXMgb24geW91ciBvd24uXDxwXD4gU3R1ZGVudHMgd2lsbCBiZW5lZml0IGZyb20gdGhlIHByYWN0aWNhbCBleGFtcGxlcyBoZXJlLCBkcmF3biBmcm9tIGEgd2lkZSByYW5nZSBvZiBsYW5ndWFnZXMuIElmIHlvdSBhcmUgYSBzZWxmLXRhdWdodCBkZXZlbG9wZXIsIHRoZSB2ZXJ5IGFwcHJvYWNoYWJsZSB0dXRvcmlhbCBjYW4gZ2l2ZSB5b3UgcGVyc3BlY3RpdmUgb24gdGhlIGZvcm1hbCBkZWZpbml0aW9ucyBvZiBtYW55IGNvbXB1dGVyIGxhbmd1YWdlcywgd2hpY2ggY2FuIGhlbHAgeW91IG1hc3RlciBuZXcgb25lcyBtb3JlIGVmZmVjdGl2ZWx5LiBcPElcPi0tUmljaGFyZCBEcmFnYW5cPC9JXD5cPHBcPiBcPEJcPlRvcGljcyBjb3ZlcmVkXDwvQlw+OiBBIHN1cnZleSBvZiB0b2RheSdzIHByb2dyYW1taW5nIGxhbmd1YWdlcywgY29tcGlsYXRpb24gdnMuIGludGVycHJldGF0aW9uLCB0aGUgY29tcGlsYXRpb24gcHJvY2VzcywgcmVndWxhciBleHByZXNzaW9uIGFuZCBjb250ZXh0LWZyZWUgZ3JhbW1hcnMsIHNjYW5uZXJzIGFuZCBwYXJzZXJzLCBuYW1lcywgc2NvcGVzIGFuZCBiaW5kaW5ncywgc2NvcGUgcnVsZXMsIG92ZXJsb2FkaW5nLCBzZW1hbnRpYyBhbmFseXNpcywgaW50cm9kdWN0aW9uIHRvIGNvbXB1dGVyIGFyY2hpdGVjdHVyZSwgcmVwcmVzZW50aW5nIGRhdGEsIGluc3RydWN0aW9uIHNldHMsIDY4MHgwIGFuZCBNSVBzIGFyY2hpdGVjdHVyZXMsIGNvbnRyb2wgZmxvdyBhbmQgZXhwcmVzc2lvbiBldmFsdWF0aW9uLCBpdGVyYXRpb24gYW5kIHJlY3Vyc2lvbiwgZGF0YSB0eXBlcywgdHlwZSBjaGVja2luZywgcmVjb3JkcywgYXJyYXlzLCBzdHJpbmdzLCBzZXRzLCBwb2ludGVycywgbGlzdHMsIGZpbGUgSS9PLCBzdWJyb3V0aW5lcywgY2FsbGluZyBzZXF1ZW5jZXMgYW5kIHBhcmFtZXRlciBwYXNzaW5nLCBleGNlcHRpb24gaGFuZGxpbmcsIGNvcm91dGluZXMsIGNvbXBpbGUgYmFjay1lbmQgcHJvY2Vzc2luZywgY29kZSBnZW5lcmF0aW9uLCBsaW5raW5nLCBvYmplY3Qtb3JpZW50ZWQgcHJvZ3JhbW1pbmcgYmFzaWNzLCBlbmNhcHN1bGF0aW9uIGFuZCBpbmhlcml0YW5jZSwgbGF0ZSBiaW5kaW5nLCBtdWx0aXBsZSBpbmhlcml0YW5jZSwgZnVuY3Rpb25hbCBhbmQgbG9naWNhbCBsYW5ndWFnZXMsIFNjaGVtZSBhbmQgUHJvbG9nLCBwcm9ncmFtbWluZyB3aXRoIGNvbmN1cnJlbmN5LCBzaGFyZWQgbWVtb3J5IGFuZCBtZXNzYWdlIHBhc3NpbmcsIGFuZCBjb2RlIG9wdGltaXphdGlvbiB0ZWNobmlxdWVzLjs+Pjs+Ozs+Oz4+Oz4+Oz4+Oz5AYIeLK0gQ/rJfyQGPmodXzXHy2g==" />

      <div class="BookReview"><img id="BookImage" class="BookReviewImage" src="http://images.amazon.com/images/P/1558604421.01._SCMZZZZZZZ_.jpg" alt="" border="0" />
        <span id="BookReviewTitle" class="BookReviewTitle">Programming Language Pragmatics</span>
        <div class="ItemDetail">By
          <span id="Authors">Michael L. Scott</span></div>
        <div class="ItemDetail">
          <span class="ItemCaption">List price:</span>
          <span id="ListPrice" class="ListPrice">$74.95</span>
          <span class="ItemCaption">Our price:</span>
          <span id="OurPrice" class="OurPrice">$74.95</span>
        </div>
        <div class="ItemDetail">
          <span class="ItemCaption">Average customer review:</span>
          <span id="AverageReview">5.0</span>
          based on
          <span id="TotalReviews">12</span>
          reviews.
        </div>
        <div class="BuyButton">
          <a href='http://www.amazon.com/exec/obidos/ASIN/1558604421/ref=nosim/iunknowncom-20'>
            <img id="Image1" src="Images/buy_from_amazon.gif" alt="" border="0" /></a>
        </div>
        <table class="ReviewBody">
          <tr>
            <td class="ReviewColumn">
              <table id="EditorialReviewsPanel" class="ReviewSection" cellpadding="0" cellspacing="0" border="0" width="100%"><tr><td>
	
                <DIV class="ReviewHeading">Amazon.com:</DIV>
                <span id="Label1">As a textbook suitable for the classroom or self-study, Michael Scott's <I>Programming Language Pragmatics</I> provides a worthy tour of the theory and practice of how programming languages are run on today's computers. Clearly organized and filled with a wide-ranging perspective on over 40 different languages, this book will be appreciated for its depth and breadth of coverage on an essential topic in computer science.<p> With references to dozens of programming languages, from Ada to Turing and everything in between (including C, C++, Java, and Perl), this book is a truly in-depth guide to how code is compiled (or interpreted) and executed on computer hardware. Early chapters tend to be slightly more theoretical (with coverage of regular expressions and context-free grammars) and will be most valuable to the computer science student, but much of this book is accessible to anyone seeking to widen their knowledge (especially since recent standards surrounding XML make use of some of the same vocabulary presented here).<p> The book has a comprehensive discussion of compilation and linking, as well as how data types are implemented in memory. Sections on functional and logical programming (illustrated with Scheme and Prolog, which are often used in AI research) can expand your understanding of how programming languages work. Final sections on the advantages--and complexities--of concurrent processing, plus a nice treatment of code optimization techniques, round out the text here. Each chapter provides numerous exercises, so you can try out the ideas on your own.<p> Students will benefit from the practical examples here, drawn from a wide range of languages. If you are a self-taught developer, the very approachable tutorial can give you perspective on the formal definitions of many computer languages, which can help you master new ones more effectively. <I>--Richard Dragan</I><p> <B>Topics covered</B>: A survey of today's programming languages, compilation vs. interpretation, the compilation process, regular expression and context-free grammars, scanners and parsers, names, scopes and bindings, scope rules, overloading, semantic analysis, introduction to computer architecture, representing data, instruction sets, 680x0 and MIPs architectures, control flow and expression evaluation, iteration and recursion, data types, type checking, records, arrays, strings, sets, pointers, lists, file I/O, subroutines, calling sequences and parameter passing, exception handling, coroutines, compile back-end processing, code generation, linking, object-oriented programming basics, encapsulation and inheritance, late binding, multiple inheritance, functional and logical languages, Scheme and Prolog, programming with concurrency, shared memory and message passing, and code optimization techniques.</span>
              
</td></tr></table>
              <table id="CustomerReviewsPanel" class="ReviewSection" cellpadding="0" cellspacing="0" border="0" width="100%"><tr><td>
	
                <DIV class="ReviewHeading">Customer reviews:</DIV>
                
                    <div class="CustomerReviewSummary">Not just for compiler developers. A little too much RISC</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>4</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>2</span>
                      /
                      <span>6</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2005-02-27</span>
                    </div>
                    <span>I agree that every compiler writer (not engineer: programming is a cruelly difficult writing *sui generis*, not engineering) needs this book but its market is or should be much wider.
<br />
<br />There is NO way to learn programming except at the intersection between compiler writing and applications programming, and it is a MISTAKE to teach programming as either a context-free application programmer's worship of machines and authority, or as the acquaintance with one programming language, its mistakes of design and implementation included, as Eleusinian mysteries demanding reverence.
<br />
<br />Dijkstra, famously, described programming as applied mathematics. The concept of "applied" introduces an ineradicable tension between one discipline and another where the key ability is the ability to shuttle between layers of representation.
<br />
<br />Crude language speaks airily of the needs of the user, where the user is hypostatized, singular, male, and imaged as wealthy and lacking taste. The actuality is that the relationship goes in computing all the way down, one user is also a worker for another, and only a programmer who has mastered his trade understands the need to transcend, in the course of understanding, the relationship. 
<br />
<br />Thus this book is useful not only to the compiler writer but also to the application programmer, because (for example), the application programmer has to understand at least in general terms how the For or Do construct of his language is evaluated.
<br />
<br />He's importuned instead to meditate upon business needs with the result that something like 80% of large systems fail.
<br />
<br />A programmer who, in Visual Basic, does not understand that For intIndex1 = 1 To intLimit - 1 is not "inefficient" because the expression is evaluated by value, doesn't know his trade. A programmer who, in C, doesn't know that while ( intIndex1 = 0; intIndex <= intLimit - 1; intIndex++ ) IS inefficient insofar as the expression is repeatedly evaluated doesn't know his trade, and the book is full of useful information about these important semantic issues.
<br />
<br />Many programmers use the totally inappropriate automobile metaphor to describe the computer and in so doing they declare that no more than they would look under the hood of their car, they should be freed of important issues of semantics and if possible coherent and readable syntax in their mindless coding.
<br />
<br />The metaphor confuses a force and energy determined system with an information engine. It also encapsulates a narrow understanding, restricted to America and other energy-wasteful societies, of what it means to relate, even to cars, for the atypical but thrifty American, who buys manual transmission used cars, or the Havana teen, who starts his car by rolling it down the hill, both are familiar, of necessity, with what goes on "under the hood"...or else.
<br />
<br />A person with claims to professional writing skills would of course be familiar with semantics as well as syntax. But in programming, semantics is confused with "being a compiler developer or something".
<br />
<br />Unlike natural language semantics, which bleeds out in history and sociology, programming language semantics is coeval with the "way the compiler works" in the sense of its specification, captured NOT in Programming Languages for Dummies BUT INSTEAD in the specifications document for the language.
<br />
<br />[In France titles in the For Dummies series are "pour les nuls", which is *tres amusant*. I don't mean to slam this series which is well written and useful, but its title needs rethinking, for it at once asserts class pride and solidarity while disempowering in the very act of doing so.] 
<br />
<br />Good program design is based on knowing how the compiler "works" in the sense of understanding the language contract, which in C forces while evaluation by reference but in Visual Basic forces it by value.
<br />
<br />The advanced material in this book on the implementation of Prolog and logic languages is important because it shows how far these languages are from being complete in the sense of first-order logic with quantification, which explains the survival of procedural languages.
<br />
<br />My First Computer Book, special-ordered from the Roosevelt University Bookstore in 1971, was Peter Wegner's Information Structures, Programming Languages, and Machine Organization, a book in the Algol tradition which taught how to think at the Edge City, where the user's problem meets the circuits. This book, like Wegner, teaches the same lessons. About its only flaw is that like many titles from Morgan Kaufmann, which seems to have an incestuous relationship with MIPS and the RISC kiddies, it overemphasizes clever optimization and completely downplays the importance of the stack model of computation, a RISCy tradition.
<br /></span>
                  
                    <div class="CustomerReviewSummary">Required for every Compiler Engineer</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>4</span>
                      /
                      <span>4</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2005-02-20</span>
                    </div>
                    <span>This is must read for every compiler engineer. 
<br />
<br />This book is 800+ pages of theory behind language design and processing of languages. 
<br />
<br />Altought it is very theoretical, it's very easy to read and well written and a pleasure to read. There are a lot of examples/figures/tables etc to explain things. I recommend people which are totally new to language design/compiler design to first read an introduction text. I can really recommend 'programming language processors in java' from Watt and Brown. This is a really good book.
<br />
<br />The title of the book suggest that this book will only cover Language Design. In reality chapter 2, 3,4 and 5 covers in depth resp. Syntax checking (parsing), Names/Scope/Binding, Semantic Analysis  and processor architecture.
<br />
<br />Beside in depth analysis of language design (e.g. OO-, functional-, imperative- and logical-languages) it gives some practical implementation advice/tips. E.g. there are only a few compilerbooks which seriously talks about the different parsing error recovery techniques. This book explain some different recovery methods. Probably error recovery is not scientific enough for the other books, but for a compiler user error recovery is really important.
<br />
<br />A last tip: this book comes in 2 editions: a paperback and hardcover edition. If you want to save some money buy the paperback.</span>
                  
                    <div class="CustomerReviewSummary">The best book to learn computer language fundamentals</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>2</span>
                      /
                      <span>3</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-10-31</span>
                    </div>
                    <span>Scott is a marvelous teacher. The book covers everything from language syntax to functional programming with ease and depth. The study of programming languages though skipped by most programmers is an essential element if you want to be a better programmer.
<br />The exercises given at the end of chapters are excellent and will reinforce your understanding. At a time when programming languages are proliferating at an amazing rate, it is essential you know how to compare the various aspects of different languages and choose the one most suitable for your work. Studying this will help you in that endeavour.
<br />Get this book, but better read it.</span>
                  
                    <div class="CustomerReviewSummary">Excellent book and looking forward for the next edition</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>3</span>
                      /
                      <span>3</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-06-10</span>
                    </div>
                    <span>This is a very high quality text/reference book. I feel that I  have my money and time well spent. The author's writing style is precise yet accessible. And his model and mindset about explaining programming languge design has been consitent all through -- always about the intricate relations and interactions among those three facets in a language design (syntactic, semantic and pragmatic). This treatment of the subject, in my view, reflects real dynamics of language design, and also makes the text more pratically useful for readers while laying out solid conceptual fundation at the same time. I am looking forward for the next edition, which I am sure that author will include discussion of more recent language examples like C# and XML.</span>
                  
                    <div class="CustomerReviewSummary">brilliant</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>4</span>
                      /
                      <span>5</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2003-12-03</span>
                    </div>
                    <span>The best (only?) book on the subject of PLs that ties abstract concepts directly to practice.  Clear, concise and incredibly thorough in both breadth and depth.  A rare pleasure...</span>
                  
              
</td></tr></table>
            </td>
            <td class="ReviewSideBar">
              <div class="ItemCaption">Customers also bought:</div>
              
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=1558603204'>
                      Advanced Compiler Design and Implementation
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.5 based on 13 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0471597546'>
                      Constructing Language Processors for Little Languages
                    </a>
                    <div class="SimilarItemRatings">Rating: 3.5 based on 2 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0201100886'>
                      Compilers
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.0 based on 47 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0471113530'>
                      Writing Compilers and Interpreters
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.0 based on 17 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0262032937'>
                      Introduction to Algorithms, Second Edition
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.0 based on 121 reviews</div>
                  </div>
                
              <div class="GoogleBookAd">
                <script type="text/javascript"><!--
                google_ad_client = "pub-8264790134546506";
                google_ad_width = 160;
                google_ad_height = 600;
                google_ad_format = "160x600_as";
                google_ad_channel ="4375045039";
                google_color_border = "CCCCCC";
                google_color_bg = "FFFFFF";
                google_color_link = "000000";
                google_color_url = "666666";
                google_color_text = "333333";
                //--></script>
                <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
                </script>
              </div>
            </td>
          </tr>
        </table>
      </div>
    </form>
  </body>
</HTML>
