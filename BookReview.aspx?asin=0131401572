
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" >
<HTML>
  <HEAD>
    <title>Recommended book: Data Access Patterns: Database Interactions in Object-Oriented Applications
    </title>
    <meta content="JavaScript" name="vs_defaultClientScript">
    <meta content="http://schemas.microsoft.com/intellisense/ie5" name="vs_targetSchema">
    <LINK href="global.css" type="text/css" rel="stylesheet">
  </HEAD>
  <body MS_POSITIONING="GridLayout">
    <a href="Default.aspx">
      <img id="Image2" class="Logo" src="images/logo.png" alt="iunknown.com: building better software, faster" border="0" /></a>
    <form name="Form1" method="post" action="BookReview.aspx?asin=0131401572" id="Form1">
<input type="hidden" name="__VIEWSTATE" value="dDwxNzczMTIwMDYzO3Q8O2w8aTwxPjs+O2w8dDw7bDxpPDE+O2k8Mz47aTw1PjtpPDc+O2k8OT47aTwxMT47aTwxMz47aTwxND47aTwxNz47PjtsPHQ8cDxwPGw8SW1hZ2VVcmw7PjtsPGh0dHA6Ly9pbWFnZXMuYW1hem9uLmNvbS9pbWFnZXMvUC8wMTMxNDAxNTcyLjAxLl9TQ01aWlpaWlpaXy5qcGc7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPERhdGEgQWNjZXNzIFBhdHRlcm5zOiBEYXRhYmFzZSBJbnRlcmFjdGlvbnMgaW4gT2JqZWN0LU9yaWVudGVkIEFwcGxpY2F0aW9uczs+Pjs+Ozs+O3Q8cDxwPGw8VGV4dDs+O2w8Q2xpZnRvbiBOb2NrOz4+Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDwkNTQuOTk7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPCQ0Mi43Nzs+Pjs+Ozs+O3Q8cDxwPGw8VGV4dDs+O2w8NC41Oz4+Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDw2Oz4+Oz47Oz47dDxAPGh0dHA6Ly93d3cuYW1hem9uLmNvbS9leGVjL29iaWRvcy9BU0lOLzAxMzE0MDE1NzIvcmVmPW5vc2ltL2l1bmtub3duY29tLTIwOz47Oz47dDxwPHA8bDxWaXNpYmxlOz47bDxvPGY+Oz4+Oz47bDxpPDA+O2k8MT47PjtsPHQ8QDxcZTs+Ozs+O3Q8cDxwPGw8VGV4dDs+O2w8XGU7Pj47Pjs7Pjs+Pjs+Pjs+Pjs+hRHaCJlxOyGkRId266qe2d9K5B0=" />

      <div class="BookReview"><img id="BookImage" class="BookReviewImage" src="http://images.amazon.com/images/P/0131401572.01._SCMZZZZZZZ_.jpg" alt="" border="0" />
        <span id="BookReviewTitle" class="BookReviewTitle">Data Access Patterns: Database Interactions in Object-Oriented Applications</span>
        <div class="ItemDetail">By
          <span id="Authors">Clifton Nock</span></div>
        <div class="ItemDetail">
          <span class="ItemCaption">List price:</span>
          <span id="ListPrice" class="ListPrice">$54.99</span>
          <span class="ItemCaption">Our price:</span>
          <span id="OurPrice" class="OurPrice">$42.77</span>
        </div>
        <div class="ItemDetail">
          <span class="ItemCaption">Average customer review:</span>
          <span id="AverageReview">4.5</span>
          based on
          <span id="TotalReviews">6</span>
          reviews.
        </div>
        <div class="BuyButton">
          <a href='http://www.amazon.com/exec/obidos/ASIN/0131401572/ref=nosim/iunknowncom-20'>
            <img id="Image1" src="Images/buy_from_amazon.gif" alt="" border="0" /></a>
        </div>
        <table class="ReviewBody">
          <tr>
            <td class="ReviewColumn">
              
              <table id="CustomerReviewsPanel" class="ReviewSection" cellpadding="0" cellspacing="0" border="0" width="100%"><tr><td>
	
                <DIV class="ReviewHeading">Customer reviews:</DIV>
                
                    <div class="CustomerReviewSummary">Useful patterns and interesting concepts</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>4</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>1</span>
                      /
                      <span>1</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-12-10</span>
                    </div>
                    <span>The book presented 25 patterns grouped in 5 areas, decoupling (conceptual and architectural level), resource, input/output, cache and concurrency.
<br />
<br />The most interesting patterns are in resource and cache. Decoupling and concurrency patterns (e.g., data accessor, active domain object, layers, transactions, optimistic/pessimistic lock etc.) are well known and the contents are a bit too light to be very useful, yet the concepts are giving readers some directions.
<br />
<br />In resource patterns, some interesting patterns are presented, particularly resource timer automatically releases inactive resource, retryer enables fault-tolerance for data access operations.
<br />
<br />In cache patterns, cache collector purges entries whose presence in the cache no longer provides any performance benefits; cache replicator replicates operations across multiple caches.
<br />
<br />There are some areas to be improved, first, author should consolidate pattern names with other pattern authors, e.g., data accessor is also known as data access object, active domain object is similar to active record,  paging iterator is close to value list handler (though value list handler is more decoupled from underlying data store), the point is, one of the important benefits and purposes for documenting patterns is to build common vocabularies among designers, using different names for same or similar patterns is defeating this purpose. The same pattern name should be used and may be presented as a variation of the original pattern.
<br />
<br />Secondly, the examples given in the book is a bit too simple, sometimes, the examples might not justify or validate the interface abstraction is generic enough to handle real world problems, so some tweaking and modification to the pattern would be expected.
<br />
<br />Overall, the book is well organized, and contents are easy to follow, most patterns come with class diagrams and sequence diagrams. Good for designers who want to decouple data access from rest of the application, utilize cache to minimize data access and thus boost application performance, manage resources in an efficient and leaking-proof way.
<br /></span>
                  
                    <div class="CustomerReviewSummary">Great book on persistence theory</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>3</span>
                      /
                      <span>3</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-05-10</span>
                    </div>
                    <span>I'm in the middle of developing yet another persistence framework for a client, having done it a couple of times before. Each time I refine my ideas about how to do it. I must say that this book has a thorough examination of issues and certainly food for thought as well as answers to a couple of questions I've had. <p>However, I wouldn't say it's a complete design (which it doesn't claim to be). I still found myself picking and choosing which patterns to use as is, which to modify to my liking, and which to discard. <p>Also, I was left with the impression that the book didn't give enough coverage to handling collections of objects. The material is mostly geared toward working with a single object, which is understandable. I just think it would have been helpful to have more discussion about handling collections. For example, what should happen when you request to load an object, but the criteria you passed to the loading mechanism results in data for more than one object being retrieved from the database? Hand back the first object? Raise an exception? If it's covered in the book, I missed it. <p>Further, I would like to see more discussion about WHEN to refresh an object from the underlying database and when to save to the database. I always struggle with that timing issue. Having studied EJB, I like how entity beans keep your bean in synch with the underlying database. But the EJB container intercepts calls and makes those things happen. When coding the persistence layer myself, that's not an option. So, again, this is something I'd like to see some light shed on.<p>Overall, though, a great book if you're interested in reading up on persistence layer patterns.</span>
                  
                    <div class="CustomerReviewSummary">Good design pattern book in data access !!</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>4</span>
                      /
                      <span>4</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-02-29</span>
                    </div>
                    <span>I am in the process of writing a thesis proposal that utilizing JDBC and TableModeler to access various database platforms as a prototype.<p>While prototyping the model, I encountered a lot of consideration of what is the best approach for certain implementation (mainly on JDBC). While looking into a few of designing books, I found this Data Access Patterns book that fits into my research needs. I have read other book such as Designing Flexible Object Oriented System with UML and not able to apply the concept or see solution in it. It is simply a conceptual book. No practical examples at all. <p>Mr. Nock has explained the design patterns very clearly in each chapter by using JDBC as a media. The examples are very easy to understand as compared to Design Patterns Explained. I am not able to understand codes that implementing graphics in that book. <p>Mr. Nock addressed the pros and cons of the patterns. Many techie books do not even bother to talk about pros and cons.<p>The author has chosen the right title for the book, I realized that many times author received a poor rating because reader expect different contents based on the title of the book. <p>The feature I liked the most - the ¡§Applicability¡¨ section on each chapter. Unlike other patterns book, the author explains the concept and gives example of "what" and "when" to use certain design pattern. This section is pretty much the answer for my thesis obstacles. The answer is in this book!!<p>Minor typos do exist such as in page 390 roll back instead of rollback.  <p>In concurrency chapter, author may have mis-used the term of updates locking. It should be Lost Updates instead of Missing updates. Concurrency chapter looks like UDB Lock Concurrency architecture.<p>Additional note - would like to see the quality aspect in each of the patterns.<p>Overall, the book is very well structured, explained and thoughtful.<p>Thank you Mr. Nock !!  This is a perfect book for my thesis.<p>Looking forward to read your future publish.<p>Regards,<p>EQ</span>
                  
                    <div class="CustomerReviewSummary">Excellent and Easy To Read</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>8</span>
                      /
                      <span>9</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-02-20</span>
                    </div>
                    <span>I have to disagree with the previous review.  I will try to explain why I think 'b88zhou' review is inadequate after presenting my overview of this book.<p>After reading numerous pattern books, it is nice to see a pattern book with very good organization.  <p>Each pattern is presented with the following subsections.<p>* Description<br>* Context<br>* Applicability<br>* Structure<br>* Iteractions<br>* Consequences<br>* Strategies<br>* Sample Code<br>* Related Patterns and Technology.<p>I specifically like 'Consequence' section because it outlines the 'bad' consequence of adopting the patter.  This goes with the mantra of design patterns - there is no one good pattern.  You trade off one design for another depending on the context of your domain.<p>Also each pattern is accompanied by UML class diagrams and UML sequence diagrams - this is a big plus in understanding pattern.<p>The sample code is written in Java/JDBC so you may need to understand Java but I believe this pattern is still relevant to ADO.NET and C++.  [ ADO.Net does offer connected and disconnected database operation so some patterns may not be relevant - plus, event/delegate will aid in some patterns.]<p>Specific to what the previous reviewer say - here are my rebuttals.<p>>> Why do you want to make queries and database updates into factories?  Looking at the sample code, does it really help decoupling?<p>The previous reviewer mentioned as 'factories' is the derivation of 'AbstractFactory'.  If you do not understand why AbstractFactory aids in decoupling from the concrete implementation, I think you should re-read GoF book.  The author uses  AbstractFactory pattern extensively in context of "Input and Output Parameter" and "Cache Patterns".  I do admit that sometimes "Input and Output Parameter patterns" may not need to use AbstractFactory but if you read 'Domain Assembler' pattern you will understand why.  From Domain Assembler, you can see the benefit of having AbstractFactories for Selection, Domain Object, and Update -- assembling all these factories via interface not concrete implmentation - a basic idea of design to interface instead concrete implementation.<p>>> The "Cache Patterns" does not solve the problem of preventing stale entry or even attempt to describe how to invalidate cache entry, so no matter how efficient you get, the cache is not guaranteed to be up-to-date /correct.<p>Please re-read 'Cache Collector'.  The pattern could have different name like 'Cache Garbage Collector'.  He talks about how you can 'purge' old data.  Also re-read 'Cache Replicator' for how to sync the cached data in distributed system.<p>>> I'm surprised "stored procedure" is not mentioned at all.<p>I guess you have not done too many DB oriented projects.  The stored procedure is evil and add little value to OO programming.  But if you want the stored procedure, just replace 'SELECT' or 'UPDATE' statements to whatever stored procedures you want to call.  So I don't think you can add much with SP.<p>>> mature object/relational frameworks like EOF (Apple WebObjects) or TopLink<p>This book is not about Java Data Object or OR mapping.  Object-Relational mapping tool is another beast.<p>I would recommend this book highly to anyone doing DB application development.</span>
                  
                    <div class="CustomerReviewSummary">Not good enough.</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>3</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>7</span>
                      /
                      <span>10</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2003-12-09</span>
                    </div>
                    <span>Having read GoF's "Design Patterns" and "Design Patterns Smalltalk Companion" in the series, I grabbed this book as soon as I see it in store. But this book leaves a lot to be desired.<p>There seems to be the problem of having patterns just for the sake of having patterns.<p>For example, why do you want to make queries and database updates into factories? Looking at the sample code, does it really help decoupling?<p>To reviewer zhanggoo> The basic idea of "design to interface instead of concrete implementation" of course is always correct. I actually took the time and tried out the sample code of "input and output patterns" and got those working. However, you must realize that these patterns need a lot of re-thinking, redesign and refactoring once it's outside the realm of toy examples - How to handle domain object or selection criteria based on multiple-table-join (very common)? How to handle database generated identity? What if there needs to have a couple of selection factories for one domain object? Not to mention these patterns are all based on SQL string manipulations, static typing of the parameters all lost.<p>How come you can only get the first page from the "Paging Iterator"? Besides giving hints to JDBC, the pattern gives no control over the rows actually returned from the database.<p>The "Cache Patterns" does not solve the problem of preventing stale entry or even attempt to describe how to invalidate cache entry, so no matter how efficient you get, the cache is not guaranteed to be up-to-date /correct.<p>To reviewer zhanggoo> The author only talked about cache expiration - purge cache entry to enhance performance, but not invalidation (to prevent cache from getting inconsistent). Experienced database developer knows that query tuning is the first thing to look at to improve performance, one should take advantage of db server cache and app server cache as much as possible, as a last resort when you really need to roll your own cache, you need to make sure you get it right.<p>I'm surprised "stored procedure" is not mentioned at all.<p>To reviewer zhanggoo> There're certainly different opinions on "stored procedure". SP is definitely not OO, RDBMS is not OO at all - as long as you're using RDBMS, you have to face the fact that OO cannot be applied everywhere. On the other hand, SP helps greatly in decoupling, since query logic are not embedded in java code, app code and db code have clear interfaces, query optimization usually is easier to do with SP. These are good practices and patterns in my book.<p>The overall organization and format of the book is good, but for experienced database application developers, you might learn more by studying mature object/relational frameworks like EOF (Apple WebObjects) or TopLink.</span>
                  
              
</td></tr></table>
            </td>
            <td class="ReviewSideBar">
              <div class="ItemCaption">Customers also bought:</div>
              
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0321125215'>
                      Domain-Driven Design: Tackling Complexity in the Heart of Software
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.5 based on 15 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0201775948'>
                      Beyond Software Architecture: Creating and Sustaining Winning Solutions
                    </a>
                    <div class="SimilarItemRatings">Rating: 5.0 based on 22 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0470845252'>
                      Pattern-Oriented Software Architecture, Patterns for Resource Management (Wiley Software Patterns Series)
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.0 based on 1 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0735619670'>
                      Code Complete, Second Edition
                    </a>
                    <div class="SimilarItemRatings">Rating: 5.0 based on 25 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0471202835'>
                      Agile Database Techniques : Effective Strategies for the Agile Software Developer (Wiley Application Development S.)
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.5 based on 5 reviews</div>
                  </div>
                
              <div class="GoogleBookAd">
                <script type="text/javascript"><!--
                google_ad_client = "pub-8264790134546506";
                google_ad_width = 160;
                google_ad_height = 600;
                google_ad_format = "160x600_as";
                google_ad_channel ="4375045039";
                google_color_border = "CCCCCC";
                google_color_bg = "FFFFFF";
                google_color_link = "000000";
                google_color_url = "666666";
                google_color_text = "333333";
                //--></script>
                <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
                </script>
              </div>
            </td>
          </tr>
        </table>
      </div>
    </form>
  </body>
</HTML>
