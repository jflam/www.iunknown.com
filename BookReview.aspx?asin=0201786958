
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" >
<HTML>
  <HEAD>
    <title>Recommended book: Exploiting Software : How to Break Code
    </title>
    <meta content="JavaScript" name="vs_defaultClientScript">
    <meta content="http://schemas.microsoft.com/intellisense/ie5" name="vs_targetSchema">
    <LINK href="global.css" type="text/css" rel="stylesheet">
  </HEAD>
  <body MS_POSITIONING="GridLayout">
    <a href="Default.aspx">
      <img id="Image2" class="Logo" src="images/logo.png" alt="iunknown.com: building better software, faster" border="0" /></a>
    <form name="Form1" method="post" action="BookReview.aspx?asin=0201786958" id="Form1">
<input type="hidden" name="__VIEWSTATE" value="dDwxNzczMTIwMDYzO3Q8O2w8aTwxPjs+O2w8dDw7bDxpPDE+O2k8Mz47aTw1PjtpPDc+O2k8OT47aTwxMT47aTwxMz47aTwxND47aTwxNz47PjtsPHQ8cDxwPGw8SW1hZ2VVcmw7PjtsPGh0dHA6Ly9pbWFnZXMuYW1hem9uLmNvbS9pbWFnZXMvUC8wMjAxNzg2OTU4LjAxLl9TQ01aWlpaWlpaXy5qcGc7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPEV4cGxvaXRpbmcgU29mdHdhcmUgOiBIb3cgdG8gQnJlYWsgQ29kZTs+Pjs+Ozs+O3Q8cDxwPGw8VGV4dDs+O2w8R3JlZyBIb2dsdW5kLCBHYXJ5IE1jR3Jhdzs+Pjs+Ozs+O3Q8cDxwPGw8VGV4dDs+O2w8JDQ5Ljk5Oz4+Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDwkNDkuOTk7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPDQuNTs+Pjs+Ozs+O3Q8cDxwPGw8VGV4dDs+O2w8MjI7Pj47Pjs7Pjt0PEA8aHR0cDovL3d3dy5hbWF6b24uY29tL2V4ZWMvb2JpZG9zL0FTSU4vMDIwMTc4Njk1OC9yZWY9bm9zaW0vaXVua25vd25jb20tMjA7Pjs7Pjt0PDtsPGk8MD47aTwxPjs+O2w8dDxAPEFtYXpvbi5jb207Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPENvbXB1dGluZyBoYXJkd2FyZSB3b3VsZCBoYXZlIG5vIHZhbHVlIHdpdGhvdXQgc29mdHdhcmVcOyBzb2Z0d2FyZSB0ZWxscyBoYXJkd2FyZSB3aGF0IHRvIGRvLiBTb2Z0d2FyZSB0aGVyZWZvcmUgbXVzdCBoYXZlIHNwZWNpYWwgYXV0aG9yaXR5IHdpdGhpbiBjb21wdXRpbmcgc3lzdGVtcy4gQWxsIGNvbXB1dGVyIHNlY3VyaXR5IHByb2JsZW1zIHN0ZW0gZnJvbSB0aGF0IGZhY3QsIGFuZCBcPElcPkV4cGxvaXRpbmcgU29mdHdhcmU6IEhvdyB0byBCcmVhayBDb2RlXDwvSVw+IHNob3dzIHlvdSBob3cgdG8gZGVzaWduIHlvdXIgc29mdHdhcmUgc28gaXQncyBhcyByZXNpc3RhbnQgYXMgcG9zc2libGUgdG8gYXR0YWNrLiBTdXJlLCBldmVyeXRoaW5nJ3MgcGhyYXNlZCBpbiBvZmZlbnNpdmUgdGVybXMgKGFzIGluc3RydWN0aW9ucyBmb3IgdGhlIGF0dGFja2VyLCB0aGF0IGlzKSwgYnV0IHRoaXMgYm9vayBoYXMgYXQgbGVhc3QgYXMgbXVjaCB2YWx1ZSBpbiBzaG93aW5nIGRlc2lnbmVycyB3aGF0IHNvcnRzIG9mIGF0dGFja3MgdGhlaXIgc29mdHdhcmUgd2lsbCBmYWNlICh0aGUgYm9vayBjb3VsZCBzZXJ2ZSBhcyBhIGNoZWNrbGlzdCBmb3IgcGFydCBvZiBhIHByZS1yZWxlYXNlIHRlc3RpbmcgcmVnaW1lbikuIFBsdXMsIHRoZSBjbGV2ZXIgcmV2ZXJzZS1lbmdpbmVlcmluZyBzdHJhdGVnaWVzIHRoYXQgR3JlZyBIb2dsdW5kIGFuZCBHYXJ5IE1jR3JhdyB0ZWFjaCB3aWxsIGJlIHVzZWZ1bCBpbiBtYW55IGxlZ2l0aW1hdGUgc29mdHdhcmUgcHJvamVjdHMuIENvbnNpZGVyIHRoaXMgYSByZWNpcGUgYm9vayBmb3IgbWF5aGVtLCBvciBhIGNvbXBlbmRpdW0gb2YgbGVzc29ucyBsZWFybmVkIGJ5IG90aGVycy4gSXQgZGVwZW5kcyBvbiB5b3VyIHNpdHVhdGlvbi5cPHBcPiAgUEhQIHByb2dyYW1tZXJzIHdpbGwgdGFrZSBpc3N1ZSB3aXRoIHRoZSBhdXRob3JzJyBibGFua2V0IGFzc2Vzc21lbnQgb2YgdGhlaXIgbGFuZ3VhZ2UgKCJQSFAgaXMgYSBzdHVkeSBpbiBiYWQgc2VjdXJpdHkiKSwgbXVjaCBvZiB3aGljaCBzZWVtcyBiYXNlZCBvbiBvbGRlciB2ZXJzaW9ucyBvZiB0aGUgbGFuZ3VhZ2UgdGhhdCBoYWQgc29tZSByaXNreSBkZWZhdWx0IGJlaGF2aW9ycy0tYnV0IHRob3NlIHByb2dyYW1tZXJzIHdpbGwgYWxzbyBkb3VibGUtY2hlY2sgdGhlaXIgc2VydmVycycgcmVnaXN0ZXJfZ2xvYmFscyBzZXR0aW5ncy4gVXNlcnMgb2YgaW5zdWZmaWNpZW50bHkgcGF0Y2hlZCBNaWNyb3NvZnQgYW5kIE9yYWNsZSBwcm9kdWN0cyB3aWxsIHdvcnJ5IGFib3V0IHRoZSBkZXRhaWxlZCBhdHRhY2sgaW5zdHJ1Y3Rpb25zIHRoaXMgYm9vayBjb250YWlucy4gUmVzcG9uc2libGUgcHJvZ3JhbW1lcnMgYW5kIGFkbWluaXN0cmF0b3JzIHdpbGwgYXBwcmVjaWF0ZSB3aGF0IGFtb3VudHMgdG8gZG9jdW1lbnRhdGlvbiBvZiBhdHRhY2tlcnMnIHJvb3RraXRzIGZvciB2YXJpb3VzIG9wZXJhdGluZyBzeXN0ZW1zLCBhbmQgd2lsbCByYWlzZSB0aGVpciBleWVicm93cyBhdCB0aGUgdGVjaG5pcXVlcyBmb3Igd3JpdGluZyBtYWxpY2lvdXMgY29kZSB0byB1bnVzZWQgRUVQUk9NIGNoaXBzIGluIHRhcmdldCBzeXN0ZW1zLiBcPElcPi0tRGF2aWQgV2FsbFw8L0lcPlw8cFw+ICBcPEJcPlRvcGljcyBjb3ZlcmVkXDwvQlw+OiBIb3cgdG8gbWFrZSBzb2Z0d2FyZSBmYWlsLCBlaXRoZXIgYnkgZG9pbmcgc29tZXRoaW5nIGl0IHdhc24ndCBkZXNpZ25lZCB0byBkbywgb3IgYnkgZGVueWluZyBpdHMgdXNlIHRvIGl0cyByaWdodGZ1bCB1c2Vycy4gVGVjaG5pcXVlcy0taW5jbHVkaW5nIHJldmVyc2UgZW5naW5lZXJpbmcsIGJ1ZmZlciBvdmVyZmxvdywgYW5kIHBhcnRpY3VsYXJseSBwcm92aXNpb24gb2YgdW5leHBlY3RlZCBpbnB1dC0tYXJlIGNvdmVyZWQgYWxvbmcgd2l0aCB0aGUgdG9vbHMgbmVlZGVkIHRvIGNhcnJ5IHRoZW0gb3V0LiBBIHNlY3Rpb24gb24gaGFyZHdhcmUgdmlydXNlcyBpcyBkZXRhaWxlZCBhbmQgZnJpZ2h0ZW5pbmcuOz4+Oz47Oz47Pj47Pj47Pj47PmJEnJqDeNfMcuUVkPRXgYaZldSE" />

      <div class="BookReview"><img id="BookImage" class="BookReviewImage" src="http://images.amazon.com/images/P/0201786958.01._SCMZZZZZZZ_.jpg" alt="" border="0" />
        <span id="BookReviewTitle" class="BookReviewTitle">Exploiting Software : How to Break Code</span>
        <div class="ItemDetail">By
          <span id="Authors">Greg Hoglund, Gary McGraw</span></div>
        <div class="ItemDetail">
          <span class="ItemCaption">List price:</span>
          <span id="ListPrice" class="ListPrice">$49.99</span>
          <span class="ItemCaption">Our price:</span>
          <span id="OurPrice" class="OurPrice">$49.99</span>
        </div>
        <div class="ItemDetail">
          <span class="ItemCaption">Average customer review:</span>
          <span id="AverageReview">4.5</span>
          based on
          <span id="TotalReviews">22</span>
          reviews.
        </div>
        <div class="BuyButton">
          <a href='http://www.amazon.com/exec/obidos/ASIN/0201786958/ref=nosim/iunknowncom-20'>
            <img id="Image1" src="Images/buy_from_amazon.gif" alt="" border="0" /></a>
        </div>
        <table class="ReviewBody">
          <tr>
            <td class="ReviewColumn">
              <table id="EditorialReviewsPanel" class="ReviewSection" cellpadding="0" cellspacing="0" border="0" width="100%"><tr><td>
	
                <DIV class="ReviewHeading">Amazon.com:</DIV>
                <span id="Label1">Computing hardware would have no value without software; software tells hardware what to do. Software therefore must have special authority within computing systems. All computer security problems stem from that fact, and <I>Exploiting Software: How to Break Code</I> shows you how to design your software so it's as resistant as possible to attack. Sure, everything's phrased in offensive terms (as instructions for the attacker, that is), but this book has at least as much value in showing designers what sorts of attacks their software will face (the book could serve as a checklist for part of a pre-release testing regimen). Plus, the clever reverse-engineering strategies that Greg Hoglund and Gary McGraw teach will be useful in many legitimate software projects. Consider this a recipe book for mayhem, or a compendium of lessons learned by others. It depends on your situation.<p>  PHP programmers will take issue with the authors' blanket assessment of their language ("PHP is a study in bad security"), much of which seems based on older versions of the language that had some risky default behaviors--but those programmers will also double-check their servers' register_globals settings. Users of insufficiently patched Microsoft and Oracle products will worry about the detailed attack instructions this book contains. Responsible programmers and administrators will appreciate what amounts to documentation of attackers' rootkits for various operating systems, and will raise their eyebrows at the techniques for writing malicious code to unused EEPROM chips in target systems. <I>--David Wall</I><p>  <B>Topics covered</B>: How to make software fail, either by doing something it wasn't designed to do, or by denying its use to its rightful users. Techniques--including reverse engineering, buffer overflow, and particularly provision of unexpected input--are covered along with the tools needed to carry them out. A section on hardware viruses is detailed and frightening.</span>
              
</td></tr></table>
              <table id="CustomerReviewsPanel" class="ReviewSection" cellpadding="0" cellspacing="0" border="0" width="100%"><tr><td>
	
                <DIV class="ReviewHeading">Customer reviews:</DIV>
                
                    <div class="CustomerReviewSummary">"Hacking Exposed" For Developers</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>1</span>
                      /
                      <span>1</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2005-02-08</span>
                    </div>
                    <span>After doing some homework to find IP addresses and TCP ports that might be open to attack and locating a target system, it is often a vulnerable application running on the target system which provides the door for an attacker to compromise a system. 
<br />
<br />Hacking Exposed and the whole genre of hacker technique and defense books provides a window for network and security administrators to peer into the world of the malicious hacker and understand how an attacker would go about finding weaknesses in their networks to exploit and attack. Using this information the network administrator can develop defenses to protect their environments from this sort of exploitation. 
<br />
<br />Exploiting Software is for software developers what Hacking Exposed is for network administrators. Greg Hoglund and Gary McGraw have written a book which explains in detail how a cracker might go about finding holes or breaking into software. They cover the tools and techniques commonly used and describe ways that a software developer can write better code to prevent these sorts of attacks. 
<br />
<br />I am not a software developer- just a dabbler in programming- but I still found the book engaging and educational. Should I ever delve deeper into software programming it is books like this one which will give me the knowledge to write code that is more secure from the get go. 
<br />
<br />Software developers should be required to read this book to fully understand their "enemy" and how to program to prevent their product from being exploited. 
<br />
<br />Tony Bradley is a consultant and writer with a focus on network security, antivirus and incident response. He is the About.com Guide for Internet / Network Security (http://netsecurity.about.com), providing a broad range of information security tips, advice, reviews and information. Tony also contributes frequently to other industry publications. For a complete list of his freelance contributions you can visit Essential Computer Security (http://www.tonybradley.com). </span>
                  
                    <div class="CustomerReviewSummary">Worth a look.</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>4</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>0</span>
                      /
                      <span>0</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2005-01-24</span>
                    </div>
                    <span>"In some sense, a knowledgeable hardware hacker is one of the most powerful people in the world today." (p9)
<br />
<br />This quote may be either alarming or inspiring, depending on your viewpoint.  This ambiguity pervades the book, which also suffers from its uncertainty of purpose.  As a review of the most common software exploits it succeeds, and is streets ahead of those cubical 'computer security' tomes.  But the reader with some background in software engineering will be left hungry for greater detail.  (This goes some way to explain the mixed reviews it has received.)
<br />
<br />Publishers often insist that an author of a technical work cut it back severely to fit the format that their marketing people believe will sell.  This may have happened here and would explain the often disjointed nature of the narrative.
<br />
<br />A book of this nature will, or course, provide some skills upgrading for the systems cracker as well as informing the system administrator, but that is unavoidable.  "Security by obscurity" works quite well in some fields (military security, for example) but not on the Internet.
<br />
<br />With all these shortcomings, it is still worth reading for the breadth of ideas you will be introduced to.  The potential scale of software vulnerability will be revealed, and you will get a quick view of the most common exploits, with some in-depth reviews of buffer overflows and rootkits.  Along the way you will review server and client vulnerabilities, how targets may be assessed and penetrated, and how reverse engineering is carried out.
<br />
<br />Topics include:
<br />attack patterns
<br />tour of an exploit
<br />how attacks are implimented
<br />reverse engineering
<br />fault injection
<br />finding vulnerabilities
<br />writng plugins for IDA and other cracking tools
<br />exploiting server software
<br />input path tracing
<br />exploiting trust in systems
<br />exploiting client software
<br />in-band signals
<br />cross-site scripting
<br />crafting malicious input
<br />audit poisoning
<br />buffer overflows (in detail)
<br />rootkits (in detail)
<br />
<br />The book is not an in-depth training guide to these areas but provides some much needed background.  Well worth the read.</span>
                  
                    <div class="CustomerReviewSummary">super!!!</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>2</span>
                      /
                      <span>9</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-12-07</span>
                    </div>
                    <span>If every developer read this book, and everyone @ MSFT, the software world would be a better place.</span>
                  
                    <div class="CustomerReviewSummary">Half of the story</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>3</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>13</span>
                      /
                      <span>14</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-08-19</span>
                    </div>
                    <span>I'm an IT auditor (my main interest area is systems software).  The premise of the book, that application security is now the key risk area for exploits is spot on.  Exploits of applications can be devestating.  This book describes basic attacks on application software; unfortunately the level of detail varies from example to example making it a little difficult to follow.  It does provide valuable examples for those developing software of potentail problem areas and common faults.  It is is also of potential value in planning penetration tests.  There is no real coverage of secure coding practices and how to integrate security into the development   process though.  The book is worth getting but provides far from exhaustive coverage of code expoitation. </span>
                  
                    <div class="CustomerReviewSummary">A book that all developers must read</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>7</span>
                      /
                      <span>16</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-06-08</span>
                    </div>
                    <span>To be useful, software must respond to events in a predictable manner. The results can then be used as a window to the interior workings of the code, revealing some of the mechanisms of operations, which may be used to find ways to make it fail in a dangerous way. To some, the window is as clear as a six inch thick pane of lead, but to those with a high level of understanding it can be clear, or at the very least serve as a keyhole. This is an allusion to the old detective stories where someone looks through the keyhole to see what is behind the door. For these reasons, no software that interacts with humans can ever be considered completely secure, and human error in the development of the software can leave the equivalent of keyholes throughout the code.<br> This book is an explanation of many of the most frequently used attack strategies used by malicious entities to find security flaws in code and exploit them. Chapter two is a list of the most common patterns used in attacking code, and all types of programs, from applications to compilers to network software are examined. In chapter three, the fundamental steps of reverse engineering source code starting with the executable are described in detail. I have had students who work in industry who have argued vehemently that it is not possible to obtain source code from executable. I knew it was possible, but until I read this chapter, I had no idea it was so easy. If you are releasing your programs as executables created directly from the source code, the examples here will very quickly make you reconsider. Without a doubt, you will be convinced that you should perform some form of obfuscation of the source before compiling or perform some type of encryption. <br> Chapters four and five are how to exploit server and client software respectively. From the perspective of the server, every input should be considered suspect, and you cannot assume that any scripting code embedded in the file was run at the client. In many cases, assumptions like this can create problems. People embed hidden fields or Javascript in HTML files and assume that the inputs are then clean, forgetting that all such code is visible to a potential attacker. This is actually worse than nothing, because an attacker can look at the features and get a good idea about what it is you are afraid of receiving. Each chapter has a list of specific strategies that are used in attacks.<br> In chapter six, you get a very brutal lesson in the wisdom of filtering input and never forgetting that characters come in more than one form. Characters such as the slash and backslash are used in representing directory structures. Some code will filter them out, but fail to catch instances where they are sent in their numeric ASCII or Unicode form. One of the classic attempts to beat the filtering is to try the sequence "\/", in the hopes that the first will be considered an escape character, so that the slash can be embedded in a string. If that happens, then the slash could be used in a pathname. Many other possibilities exist to send code that is clearly malicious, but only if it is interpreted the proper way.<br> Chapter six is a complete tour of the most common security weakness found in software, the buffer overflow. It is the simplest problem to understand and one of the most difficult to remove. Every C programmer has had to find and repair a bug due to an off-by-one error, or some other overflow. And yet, despite all this experience, buffer overflows still are prevalent in commercial code. Most of the obvious ones have been removed, so only the very subtle ones remain. Some of these are very hard and very, very subtle. I was amazed in reading the section on format string vulnerabilities. While this bug has largely been repaired, the fact that something as apparently trivial as a format field specifier can be a security problem was a real eye opener. <br> The last chapter was an explanation of rootkits, the software that controls every aspect of the machine. It was also without question the scariest of all the chapters, because in this case, the malicious code could reside in the BIOS, and be largely immune to virus scanning tools. For the first time, we are talking about hardware viruses that can be spread from machine to machine. Some of the attacks are also very simple. Since flash memory can only be rewritten a certain number of times, a virus that simply rewrites it many times can render it worthless. <br> It has been some time since I have written commercial code, most of what I have written recently has been for training purposes. After reading this book, I have begun a crash program of writing code that demonstrates security flaws and have used it in my courses. If I ever go back to managing a coding team, no one will write a line of code before we cover this book in the finest possible detail. Without question it will be on my list of the best books of the year 2004.<p>Published in the online Journal of Object Technology, reprinted with permission.</span>
                  
              
</td></tr></table>
            </td>
            <td class="ReviewSideBar">
              <div class="ItemCaption">Customers also bought:</div>
              
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0596005458'>
                      Security Warrior
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.5 based on 23 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=1593270070'>
                      Hacking: The Art of Exploitation
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.5 based on 27 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=1931769222'>
                      Hacker Disassembling Uncovered
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.5 based on 15 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0764544683'>
                      The Shellcoder's Handbook : Discovering and Exploiting Security Holes 
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.5 based on 17 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=020172152X'>
                      Building Secure Software: How to Avoid Security Problems the Right Way
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.0 based on 23 reviews</div>
                  </div>
                
              <div class="GoogleBookAd">
                <script type="text/javascript"><!--
                google_ad_client = "pub-8264790134546506";
                google_ad_width = 160;
                google_ad_height = 600;
                google_ad_format = "160x600_as";
                google_ad_channel ="4375045039";
                google_color_border = "CCCCCC";
                google_color_bg = "FFFFFF";
                google_color_link = "000000";
                google_color_url = "666666";
                google_color_text = "333333";
                //--></script>
                <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
                </script>
              </div>
            </td>
          </tr>
        </table>
      </div>
    </form>
  </body>
</HTML>
