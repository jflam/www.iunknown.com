
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" >
<HTML>
  <HEAD>
    <title>Recommended book: How to Break Software: A Practical Guide to Testing
    </title>
    <meta content="JavaScript" name="vs_defaultClientScript">
    <meta content="http://schemas.microsoft.com/intellisense/ie5" name="vs_targetSchema">
    <LINK href="global.css" type="text/css" rel="stylesheet">
  </HEAD>
  <body MS_POSITIONING="GridLayout">
    <a href="Default.aspx">
      <img id="Image2" class="Logo" src="images/logo.png" alt="iunknown.com: building better software, faster" border="0" /></a>
    <form name="Form1" method="post" action="BookReview.aspx?asin=0201796198" id="Form1">
<input type="hidden" name="__VIEWSTATE" value="dDwxNzczMTIwMDYzO3Q8O2w8aTwxPjs+O2w8dDw7bDxpPDE+O2k8Mz47aTw1PjtpPDc+O2k8OT47aTwxMT47aTwxMz47aTwxND47aTwxNz47PjtsPHQ8cDxwPGw8SW1hZ2VVcmw7PjtsPGh0dHA6Ly9pbWFnZXMuYW1hem9uLmNvbS9pbWFnZXMvUC8wMjAxNzk2MTk4LjAxLl9TQ01aWlpaWlpaXy5qcGc7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPEhvdyB0byBCcmVhayBTb2Z0d2FyZTogQSBQcmFjdGljYWwgR3VpZGUgdG8gVGVzdGluZzs+Pjs+Ozs+O3Q8cDxwPGw8VGV4dDs+O2w8SmFtZXMgQS4gV2hpdHRha2VyOz4+Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDwkMzUuMDA7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPCQyMy4xMDs+Pjs+Ozs+O3Q8cDxwPGw8VGV4dDs+O2w8My41Oz4+Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDwxMzs+Pjs+Ozs+O3Q8QDxodHRwOi8vd3d3LmFtYXpvbi5jb20vZXhlYy9vYmlkb3MvQVNJTi8wMjAxNzk2MTk4L3JlZj1ub3NpbS9pdW5rbm93bmNvbS0yMDs+Ozs+O3Q8O2w8aTwwPjtpPDE+Oz47bDx0PEA8Qm9vayBEZXNjcmlwdGlvbjs+Ozs+O3Q8cDxwPGw8VGV4dDs+O2w8XDxQXD5cPEJcPiBQcmFjdGljYWwgdHV0b3JpYWwgb24gaG93IHRvIGFjdHVhbGx5IGRvIHRlc3RpbmcgYnkgcHJlc2VudGluZyBudW1lcm91cyAiYXR0YWNrcyIgeW91IGNhbiBwZXJmb3JtIHRvIHRlc3QgeW91ciBzb2Z0d2FyZSBmb3IgYnVncy4gXDwvQlw+XDwvUFw+IFw8VUxcPlw8TElcPiBQcmFjdGljYWwgYXBwcm9hY2ggaGFzIGxpdHRsZSBvciBubyB0aGVvcnksIGJ1dCBzaG93cyByZWFsIHdheXMgZWZmZWN0aXZlbHkgdGVzdCBzb2Z0d2FyZSYjODIxMlw7YWNjZXNzaWJsZSB0byBiZWdpbm5lcnMgYW5kIHNlYXNvbmVkIHRlc3RlcnMuIFw8L0xJXD4gXDxMSVw+IFRoZSBhdXRob3IgaXMgd2VsbCBrbm93biBhbmQgcmVzcGVjdGVkIGFzIGFuIGluZHVzdHJ5IGNvbnN1bHRhbnQgYW5kIHNwZWFrZXIuIFw8L0xJXD4gXDxMSVw+IFVzZXMgbWFya2V0IGxlYWRpbmcsIGFuZCBpbW1lZGlhdGVseSBpZGVudGlmaWFibGUsIHNvZnR3YXJlIGFwcGxpY2F0aW9ucyBhcyBleGFtcGxlcyB0byBzaG93IGJ1Z3MgYW5kIHRlY2huaXF1ZXMuIFw8L0xJXD5cPC9VTFw+XDxQXD5cPElcPkhvdyB0byBCcmVhayBTb2Z0d2FyZVw8L0lcPiBpcyBhIGRlcGFydHVyZSBmcm9tIGNvbnZlbnRpb25hbCB0ZXN0aW5nIGluIHdoaWNoIHRlc3RlcnMgcHJlcGFyZSBhIHdyaXR0ZW4gdGVzdCBwbGFuIGFuZCB0aGVuIHVzZSBpdCBhcyBhIHNjcmlwdCB3aGVuIHRlc3RpbmcgdGhlIHNvZnR3YXJlLiBUaGUgdGVzdGluZyB0ZWNobmlxdWVzIGluIHRoaXMgYm9vayBhcmUgYXMgZmxleGlibGUgYXMgY29udmVudGlvbmFsIHRlc3RpbmcgaXMgcmlnaWQuIEFuZCBmbGV4aWJpbGl0eSBpcyBuZWVkZWQgaW4gc29mdHdhcmUgcHJvamVjdHMgaW4gd2hpY2ggcmVxdWlyZW1lbnRzIGNhbiBjaGFuZ2UsIGJ1Z3MgY2FuIGJlY29tZSBmZWF0dXJlcyBhbmQgc2NoZWR1bGUgcHJlc3N1cmVzIG9mdGVuIGZvcmNlIHBsYW5zIHRvIGJlIHJlYXNzZXNzZWQuICBTb2Z0d2FyZSB0ZXN0aW5nIGlzIG5vdCBzdWNoIGFuIGV4YWN0IHNjaWVuY2UgdGhhdCBvbmUgY2FuIGRldGVybWluZSB3aGF0IHRvIHRlc3QgaW4gYWR2YW5jZSBhbmQgdGhlbiBleGVjdXRlIHRoZSBwbGFuIGFuZCBiZSBkb25lIHdpdGggaXQuIEluc3RlYWQgb2YgYSBwbGFuLCBpbnRlbGxpZ2VuY2UsIGluc2lnaHQsIGV4cGVyaWVuY2UgYW5kIGEgIm5vc2UgZm9yIHdoZXJlIHRoZSBidWdzIGFyZSBoaWRpbmciIHNob3VsZCBndWlkZSB0ZXN0ZXJzLiBUaGlzIGJvb2sgaGVscHMgdGVzdGVycyBkZXZlbG9wIHRoaXMgaW5zaWdodC4gIFRoZSB0ZWNobmlxdWVzIHByZXNlbnRlZCBpbiB0aGlzIGJvb2sgbm90IG9ubHkgYWxsb3cgdGVzdGVycyB0byBnbyBvZmYtc2NyaXB0LCB0aGV5IGVuY291cmFnZSB0aGVtIHRvIGRvIHNvLiBEb24ndCBibGluZGx5IGZvbGxvdyBhIGRvY3VtZW50IHRoYXQgbWF5IGJlIG91dCBvZiBkYXRlIGFuZCB0aGF0IHdhcyB3cml0dGVuIGJlZm9yZSB0aGUgcHJvZHVjdCB3YXMgZXZlbiB0ZXN0YWJsZS4gSW5zdGVhZCwgdXNlIHlvdXIgaGVhZCEgT3BlbiB5b3VyIGV5ZXMhIFRoaW5rIGEgbGl0dGxlLCB0ZXN0IGEgbGl0dGxlIGFuZCB0aGVuIHRoaW5rIGEgbGl0dGxlIG1vcmUuICBUaGlzIGJvb2sgZG9lcyB0ZWFjaCBwbGFubmluZywgYnV0IGluIGFuICJvbi0gdGhlLWZseSB3aGlsZSB5b3UgYXJlIHRlc3RpbmciIHdheS4gIEl0IGFsc28gZW5jb3VyYWdlcyBhdXRvbWF0aW9uIHdpdGggbWFueSByZXBldGl0aXZlIGFuZCBjb21wbGV4IHRhc2tzIHRoYXQgcmVxdWlyZSBnb29kIHRvb2xzIChvbmUgc3VjaCB0b29sIGlzIHNoaXBwZWQgd2l0aCB0aGlzIGJvb2sgb24gdGhlIGNvbXBhbmlvbiBDRCkuIEhvd2V2ZXIsIHRvb2xzIGFyZSBuZXZlciB1c2VkIGFzIGEgcmVwbGFjZW1lbnQgZm9yIGludGVsbGlnZW5jZS4gVGVzdGVycyBkbyB0aGUgdGhpbmtpbmcgYW5kIHVzZSB0b29scyB0byBjb2xsZWN0IGRhdGEgYW5kIGhlbHAgdGhlbSBleHBsb3JlIGFwcGxpY2F0aW9ucyBtb3JlIGVmZmljaWVudGx5IGFuZCBlZmZlY3RpdmVseS4gICBcPC9QXD5cPFBcPiBcPEJcPkphbWVzIEEuIFdoaXR0YWtlclw8L0JcPiBpcyBhIHdlbGwta25vd24gc3BlYWtlciBhbmQgY29uc3VsdGFudCwgYXMgd2VsbCBhcyBzZWFzb25lZCBwcm9mZXNzb3IuOz4+Oz47Oz47Pj47Pj47Pj47PpIMeHoD22KXClJQdiSydOOVVDiQ" />

      <div class="BookReview"><img id="BookImage" class="BookReviewImage" src="http://images.amazon.com/images/P/0201796198.01._SCMZZZZZZZ_.jpg" alt="" border="0" />
        <span id="BookReviewTitle" class="BookReviewTitle">How to Break Software: A Practical Guide to Testing</span>
        <div class="ItemDetail">By
          <span id="Authors">James A. Whittaker</span></div>
        <div class="ItemDetail">
          <span class="ItemCaption">List price:</span>
          <span id="ListPrice" class="ListPrice">$35.00</span>
          <span class="ItemCaption">Our price:</span>
          <span id="OurPrice" class="OurPrice">$23.10</span>
        </div>
        <div class="ItemDetail">
          <span class="ItemCaption">Average customer review:</span>
          <span id="AverageReview">3.5</span>
          based on
          <span id="TotalReviews">13</span>
          reviews.
        </div>
        <div class="BuyButton">
          <a href='http://www.amazon.com/exec/obidos/ASIN/0201796198/ref=nosim/iunknowncom-20'>
            <img id="Image1" src="Images/buy_from_amazon.gif" alt="" border="0" /></a>
        </div>
        <table class="ReviewBody">
          <tr>
            <td class="ReviewColumn">
              <table id="EditorialReviewsPanel" class="ReviewSection" cellpadding="0" cellspacing="0" border="0" width="100%"><tr><td>
	
                <DIV class="ReviewHeading">Book Description:</DIV>
                <span id="Label1"><P><B> Practical tutorial on how to actually do testing by presenting numerous "attacks" you can perform to test your software for bugs. </B></P> <UL><LI> Practical approach has little or no theory, but shows real ways effectively test software&#8212;accessible to beginners and seasoned testers. </LI> <LI> The author is well known and respected as an industry consultant and speaker. </LI> <LI> Uses market leading, and immediately identifiable, software applications as examples to show bugs and techniques. </LI></UL><P><I>How to Break Software</I> is a departure from conventional testing in which testers prepare a written test plan and then use it as a script when testing the software. The testing techniques in this book are as flexible as conventional testing is rigid. And flexibility is needed in software projects in which requirements can change, bugs can become features and schedule pressures often force plans to be reassessed.  Software testing is not such an exact science that one can determine what to test in advance and then execute the plan and be done with it. Instead of a plan, intelligence, insight, experience and a "nose for where the bugs are hiding" should guide testers. This book helps testers develop this insight.  The techniques presented in this book not only allow testers to go off-script, they encourage them to do so. Don't blindly follow a document that may be out of date and that was written before the product was even testable. Instead, use your head! Open your eyes! Think a little, test a little and then think a little more.  This book does teach planning, but in an "on- the-fly while you are testing" way.  It also encourages automation with many repetitive and complex tasks that require good tools (one such tool is shipped with this book on the companion CD). However, tools are never used as a replacement for intelligence. Testers do the thinking and use tools to collect data and help them explore applications more efficiently and effectively.   </P><P> <B>James A. Whittaker</B> is a well-known speaker and consultant, as well as seasoned professor.</span>
              
</td></tr></table>
              <table id="CustomerReviewsPanel" class="ReviewSection" cellpadding="0" cellspacing="0" border="0" width="100%"><tr><td>
	
                <DIV class="ReviewHeading">Customer reviews:</DIV>
                
                    <div class="CustomerReviewSummary">23 ways to crash your software</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>1</span>
                      /
                      <span>1</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-10-06</span>
                    </div>
                    <span>James is one of the most engaging speakers to be found at software testing conferences; in part this is due the many rich experiences that he and his associates have encountered in their long tenure in this domain.  The good news is that James has endeavored to distill the essence of his lively and effective presentations into a concise and easy read.
<br />
<br />This book provides overviews on a series of generic attacks (or software testing techniques) that can be applied to virtually any software application. Although it should be noted that the application used to illustrate these techniques is frequently MS Office, and consequentially my give the false impression that the book is only aimed at GUI app's running on a Windows platform.
<br />
<br />Chapters 2 & 3 describe a total of 17 different ways in which input data can be manipulated with a specific test objective in mind. For example, forcing an internal data structure to store too many (or too few) values. Chapter 4 lists an additional 6 attacks that focus on creating an unpleasant environment for the application to run in. For example, varying file access permissions, filling-up the free-space on a hard drive, or starving an application of CPU usage.
<br />Whether you elect to think of these types of tests as "negative", "non-functional", "robustness", or some other category, they all have the potential to Break your Software, and as such are all worthy of consideration when you are determining how best to mitigate this possibility. In summary, I believe James has done an excellent job of describing a solid collection of techniques for unit-testing software.
<br />
<br />In the vain of "full disclosure", you should know that I've known James for several years, and consequently I cannot be considered a completely impartial reviewer.
<br /></span>
                  
                    <div class="CustomerReviewSummary">Don't Waste Your Money</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>1</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>7</span>
                      /
                      <span>9</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-09-01</span>
                    </div>
                    <span>The text is interesting and informative. The text is short and sweet. There are examples, which is nice. That is as good as it gets.
<br />
<br />Much of the text is based on Canned Heat, a test environment which the author claims works of Windows 2000.  This claim appears to be bogus.  I have verified that the software does not work on several perfectly healthy Windows 2000 workstations. The software does appear to work on Windows XP.
<br />
<br />The problem is that so much of the text is based on Canned Heat, so if you can't get this to work, much of the text is not that useful.  The text begins to sound like a marketing brochure for Canned Heat. 
<br />
<br />If you go to the website, you may be dissappointed (as I was) to never receive a response.  Every form I tried returned an error message. I have verified this with other interested parties. Emails to the addresses provided have not been answered.
<br />
<br />My best advice is to avoid "How to Break Software" and "How to Break Software Security."  For what little you get, the books are overpriced.
<br />
<br />If the author wants his readers to take him seriously as an authority on software testing, then he should spend more time testing his own software before shipping it out. Frankly, I find it hard to take him seriously if this is the best he can do.
<br /></span>
                  
                    <div class="CustomerReviewSummary">Testing Techniques based on Empirical Research</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>6</span>
                      /
                      <span>6</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-07-29</span>
                    </div>
                    <span>This slim volume presents a series of testing techniques, dubbed
<br /> "attacks", that target common software errors. The list is based on an
<br /> empirical analysis of a large number of bugs found in commercial
<br /> software by the software testing labs at the Florida Institute of
<br /> Technology. Each attack is illustrated with an actual bug found in
<br /> everyday software. The analysis and the examples are mostly drawn from
<br /> Microsoft software.
<br /> </span>
                  
                    <div class="CustomerReviewSummary">Perspective is everything</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>12</span>
                      /
                      <span>15</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-01-28</span>
                    </div>
                    <span>I think that this is an exceedingly useful book.<p>Most books that purport to be about testing are really about something else.  They're generally about planning, or process, or mathematics, or graph theory.  Often, they're about making models of software so that you can demonstrate that there are indeed jillions of paths through a given piece of software--hardly news to anyone who's bothered to think about it for a while.  Sometimes they're about the underlying theory of the thing you're supposed to be testing, such as "Web applications" or "security".  All of these are useful things to think about, to be sure.  Many of these books are large, and this one is small.  I would venture to say, though, that few books talk about actual bugs as much as this one does, and provide such entertaining, cringeworthy examples.<p>This book is about testing, and it's about thinking about testing.  It provides a set of theories of error, and follows these with worked-out examples of using those theories of error to find bugs in real software.  What a concept.<p>In some reviews of this book, you'll find pious pronouncements about process; you'll see one that complains that this book doesn't have anything about testing J2EE applications; or that this book somehow applies only to Microsoft software.  Those reviews all represent valid points of view, equivalent to the valid point of view that Moby Dick is a book about a big fish.  <p>Some of the information presented is quite basic.  Mind, as a tester, testing trainer, and user of software, I've seen a lot of software--a LOT of software--not Microsoft products, some written in Java, built with well-defined process... but some pretty basic bugs.  Mission to Mars, anyone?<p>Some reviews also seem to believe that there is One True Way to develop and test software.  That may be true, though I doubt it.  But either way, it's unquestionably true that the followers of The One True Way are in the extreme minority, and the rest of us testers have to live by our wits, work under pressure in chaotic organizations, and find important bugs quickly.<p>The book inspired me to think about the way that I approach a piece of software that I haven't seen before.  I know some things about the underlying operating system (whatever it may be); I know something about the way data is represented in binary coding systems (whichever one might be in use at the time); I know something about the construction of programs (irrespective of the programming language); I know something about the way the program interacts with humans and other software.  I also know something about the way programs and programmers can screw up--that is, I know something about certain risks.  As a real tester in the real world, sometimes that and the program are all I have to work with.  Nonetheless, I can use those things to find bugs effectively.  Besides, even if I do have a specification, it's invariably incomplete, or wrong, or out of date, or so thick as to be unreadable in the time I have to test.<p>The book is fun to read, too--some of the fun is in the Microsoft-inspired schadenfreude, and some is the relaxed, conversational style of the writing.  One nice notion expressed in the book is getting together with other testers and talking about bugs for fun.  Good point--I believe that people learn more easily when they're talking to each other and having fun.<p>So this book helped me by providing an example of a taxonomy of software interfaces and theories of error, and ways of attacking the software based on those interfaces and theories.  I have my own theories of error, and my own models, too; this book helped me to think about them and refine them.  It's not the One True Way of Software Testing.  Good thing, too:  there isn't one.<p>Don't get me wrong:  I would love to have a perfectly written specification to which the software completely conformed.  If I were confident that such a thing were possible, I would never have to test; by that fantastic definition, the software would work perfectly.<p>A good book should help and inspire you to think for yourself.  If your mind is closed to extending the ideas in this book (or any other), you probably won't like it much--but then you probably won't be able to function very well when you move to a different development culture.  That is (sad to say) you won't be a very good tester when you leave your cocoon.  In fact, if your mind is closed, you're probably not a very good tester now.<p>On the other hand, I believe that this book is very useful if you keep your mind open, accept its lessons and examples, and apply them to your own projects, your own environment, and your own thinking.  We need more testing books like it.</span>
                  
                    <div class="CustomerReviewSummary">Solid, hard-core testing book.  Pleasant and easy to read</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>3</span>
                      /
                      <span>5</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2003-12-29</span>
                    </div>
                    <span>This testing book is NOT just about targeting boundary conditions, although I can see how people with no insight can perceive it as such...  Testing is about knowing the environment; knowing the system.  This book as opposed to most of the software testing books out there, focuses on this model.  <p>Usually to achieve this goal, a writer would need over 500 pages, yet Whittaker does it in 200 and most important in a fast and hands-on fashion.  <p>This book is a perfect introduction to any software tester.  Its a jump start to better code coverage.  Whittaker doesn't go deep into subjects; he just gives you enough info so that you can go and explore by yourself.  <p>I've successfully applied these techniques for both Windows and Unix systems.  This book is great to understand software: both the OS and user applications. What more can you ask for 200 pages? 5/5 because of such good content in such little space.</span>
                  
              
</td></tr></table>
            </td>
            <td class="ReviewSideBar">
              <div class="ItemCaption">Customers also bought:</div>
              
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0471223980'>
                      Managing the Testing Process: Practical Tools and Techniques for Managing Hardware and Software Testing, 2nd Edition
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.0 based on 15 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0321194330'>
                      How to Break Software Security
                    </a>
                    <div class="SimilarItemRatings">Rating: 5.0 based on 4 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0471358460'>
                      Testing Computer Software, 2nd Edition
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.5 based on 29 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0471081124'>
                      Lessons Learned in Software Testing
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.5 based on 23 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0201794292'>
                      Effective Software Testing: 50 Specific Ways to Improve Your Testing
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.5 based on 8 reviews</div>
                  </div>
                
              <div class="GoogleBookAd">
                <script type="text/javascript"><!--
                google_ad_client = "pub-8264790134546506";
                google_ad_width = 160;
                google_ad_height = 600;
                google_ad_format = "160x600_as";
                google_ad_channel ="4375045039";
                google_color_border = "CCCCCC";
                google_color_bg = "FFFFFF";
                google_color_link = "000000";
                google_color_url = "666666";
                google_color_text = "333333";
                //--></script>
                <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
                </script>
              </div>
            </td>
          </tr>
        </table>
      </div>
    </form>
  </body>
</HTML>
