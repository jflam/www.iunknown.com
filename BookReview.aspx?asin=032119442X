
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" >
<HTML>
  <HEAD>
    <title>Recommended book: MDA Explained: The Model Driven Architecture--Practice and Promise
    </title>
    <meta content="JavaScript" name="vs_defaultClientScript">
    <meta content="http://schemas.microsoft.com/intellisense/ie5" name="vs_targetSchema">
    <LINK href="global.css" type="text/css" rel="stylesheet">
  </HEAD>
  <body MS_POSITIONING="GridLayout">
    <a href="Default.aspx">
      <img id="Image2" class="Logo" src="images/logo.png" alt="iunknown.com: building better software, faster" border="0" /></a>
    <form name="Form1" method="post" action="BookReview.aspx?asin=032119442X" id="Form1">
<input type="hidden" name="__VIEWSTATE" value="dDwxNzczMTIwMDYzO3Q8O2w8aTwxPjs+O2w8dDw7bDxpPDE+O2k8Mz47aTw1PjtpPDc+O2k8OT47aTwxMT47aTwxMz47aTwxND47aTwxNz47PjtsPHQ8cDxwPGw8SW1hZ2VVcmw7PjtsPGh0dHA6Ly9pbWFnZXMuYW1hem9uLmNvbS9pbWFnZXMvUC8wMzIxMTk0NDJYLjAxLl9TQ01aWlpaWlpaXy5qcGc7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPE1EQSBFeHBsYWluZWQ6IFRoZSBNb2RlbCBEcml2ZW4gQXJjaGl0ZWN0dXJlLS1QcmFjdGljZSBhbmQgUHJvbWlzZTs+Pjs+Ozs+O3Q8cDxwPGw8VGV4dDs+O2w8QW5uZWtlIEtsZXBwZSwgSm9zIFdhcm1lciwgV2ltIEJhc3Q7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPCQzNC45OTs+Pjs+Ozs+O3Q8cDxwPGw8VGV4dDs+O2w8JDIzLjA5Oz4+Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDw0LjM7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPDY7Pj47Pjs7Pjt0PEA8aHR0cDovL3d3dy5hbWF6b24uY29tL2V4ZWMvb2JpZG9zL0FTSU4vMDMyMTE5NDQyWC9yZWY9bm9zaW0vaXVua25vd25jb20tMjA7Pjs7Pjt0PHA8cDxsPFZpc2libGU7PjtsPG88Zj47Pj47PjtsPGk8MD47aTwxPjs+O2w8dDxAPFxlOz47Oz47dDxwPHA8bDxUZXh0Oz47bDxcZTs+Pjs+Ozs+Oz4+Oz4+Oz4+Oz55MVLtJJta0kNCGNKwGIDSl4DRmA==" />

      <div class="BookReview"><img id="BookImage" class="BookReviewImage" src="http://images.amazon.com/images/P/032119442X.01._SCMZZZZZZZ_.jpg" alt="" border="0" />
        <span id="BookReviewTitle" class="BookReviewTitle">MDA Explained: The Model Driven Architecture--Practice and Promise</span>
        <div class="ItemDetail">By
          <span id="Authors">Anneke Kleppe, Jos Warmer, Wim Bast</span></div>
        <div class="ItemDetail">
          <span class="ItemCaption">List price:</span>
          <span id="ListPrice" class="ListPrice">$34.99</span>
          <span class="ItemCaption">Our price:</span>
          <span id="OurPrice" class="OurPrice">$23.09</span>
        </div>
        <div class="ItemDetail">
          <span class="ItemCaption">Average customer review:</span>
          <span id="AverageReview">4.3</span>
          based on
          <span id="TotalReviews">6</span>
          reviews.
        </div>
        <div class="BuyButton">
          <a href='http://www.amazon.com/exec/obidos/ASIN/032119442X/ref=nosim/iunknowncom-20'>
            <img id="Image1" src="Images/buy_from_amazon.gif" alt="" border="0" /></a>
        </div>
        <table class="ReviewBody">
          <tr>
            <td class="ReviewColumn">
              
              <table id="CustomerReviewsPanel" class="ReviewSection" cellpadding="0" cellspacing="0" border="0" width="100%"><tr><td>
	
                <DIV class="ReviewHeading">Customer reviews:</DIV>
                
                    <div class="CustomerReviewSummary">Informative, but premature</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>4</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>1</span>
                      /
                      <span>2</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-06-07</span>
                    </div>
                    <span>The MDA looks like a very promising solution to big problems. <P>Big problems, almost by definition, have lots of parts. Today, that means databases, network protocols, incompatible languages, distributed processing on disparate platforms, and more. Building any one part on any one platform is easy enough. The problem is to guarantee that the database, the Enterprise Bean interfaces, the HTML forms, and everything else match each other. There are two ways to make matching work. First, you can spend the rest of your life running around and looking at all interacting pairs of things, hoping that nothing changed while you weren't looking. Second, you can derive all those parts automatically from a common source. That's what the MDA is about.<P>The MDA defines hierarchies of meta- and meta-meta-models. If you read between the lines, you'll probably see that each level of meta-abstraction requires a successively more knowledgeable, capable developer. This book works at the highest levels, so probably won't make much sense to entry-level staff with a more concrete and immediate view. (I shudder to think about maintenance of high-level tools by entry-level staff, and it will happen, somewhere some day.) The MDA approach assumes complete fluency with the UML, MOF, OCL, and other alphabet soup. That is necessary because the MDA half-defines transformation rules that convert a specification, in successive steps, into code. It's a bit like the filter approach of XSLT.<P>The good news is that one specification can be transformed into a database schema, a Java Bean, a web form, and more, by applying different transformations to the spec. Consistency is ensured, at least to the extent that the different transformation rules are correct and consistent.<P>There are a few problems with the MDA approach. First, the authors point out that it's just not there. It's a blue-sky spec, with no underlying implementations. A few vendors have declared their products MDA-compatible. I'm reminded that a block of wood with two nails driven in wass compatible with the electrical safety specs from the old Ma Bell days. Non-interference is a form of compatibility, just not a very interesting one.<P>Second, if you have a small problem, though, you're stuck. The only apparent way for MDA to handle a small problem is first to turn it into a big problem, then solve that. Victims of heavy-weight CASE tools in light-weight projects will have some experience of that already.<P>Third, and most critical, is that it just isn't complete enough. The transformation rules, at least as shown here, don't really have the expressive power needed for generating compilable code. That operation, the one that matters, seems to be "implementation dependent", i.e. jungle rules. Also, despite the authors' assurance (sec 12.1.3) that MDA really will generate code that doesn't need manual involvement, they have no shown that. Quite the opposite. The sample application (p.120) shows how the model generates a business-rule method, but gives no indication how that method's body is to be defined! <P>The MDA is interesting, but perhaps not the "paradigm shift" that the authors claim. In many ways, it's like the common code-generating CASE tools writ large. Getting to the authors' ultimate vision will take years, many incremental steps, and probably a good bit of pain on the developers' part.<P>Still, software is getting bigger and software problems are getting bigger. They need to be tamed somehow, and maybe the MDA will address important parts of the problems. I'm watching and waiting, but getting on with my business in the mean time.</span>
                  
                    <div class="CustomerReviewSummary">MDA is here is to stay</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>9</span>
                      /
                      <span>10</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2003-12-18</span>
                    </div>
                    <span>There have been many talks about MDA, but none as "complete" as this book. Granted that MDA is still under development and who knows what will actually happen to it when it is actually released, the authors of this book do an extraordinary job explaining what MDA is at its current stage and what areas might still change for the better before its final release. <BR>MDA is here to stay. There are many people that are very skeptical about the future of MDA, but the authors thru show and tell, explain why MDA is very much needed by the community and why it is here to stay for a very long time. The book starts by touching on some of the current problems that the software development process is facing these days:<BR>路	Productivity problem: Writing code is being productive, and models that do not relate to anything with the code and are just stick figures on papers don't really mean much<BR>路	Portability Problem: The need to port applications from one platform to another, or from one technology to another<BR>路	Interoperability Problem: The systems need to interoperate and integrate together much more smoothly than they do today<BR>路	Maintenance and Documentation Problem: Documents don't really mean much if they are not representative of the current system and can not be used to figure out what the system does. <P>It is very difficult; as you may have had the pleasure of finding out the hard way, to actually implement true round trip engineering. It is a great concept on paper, but once you start the process of coding who has the time to go back and update the model? Update the use-cases and propagate the changes all the way down stream to the test cases? Specially if your project is under the gun and is already behind the schedule. The truth of the matter is that until today, modeling has been a great concept to kick things off, but many managers, project leads, etc... do not see the value of modeling and how it can improve their software. MDA is the answer to these questions... It's what we like to have if we had it all... It is a promise of something grand and it's being presented in this book as such. This book is the blue print of where things in the software development process will be 3-5 years from now. <P>The author then goes into the details of the MDA framework and breaks that up to 4 parts:<BR>路	The Model<BR>路	The language in which the model is written in<BR>路	The transformation definition which describes how the model in one language can be transformed into another<BR>路	Transformation tool which performs the transformation using a specific transformation definition<P>Each part of the MDA framework is then broken up into its sub-parts and each are explained. The model, which is what we all are familiar with, is actually broken up to three parts in MDA:<P>路	The Platform Independent Model - PIM<BR>路	The Platform Specific Model - PSM<BR>路	The Code<P>The bulk of what MDA is in the transformation tools that transform one model to the other. The author spends a great deal of the book explaining what these transformation tools could look like, and it actually gives three examples of such tools in this book:<BR>路	Transformation tool to transform PIM to PSM for a relational database<BR>路	Transformation tool to transform PIM to PSM for EJB's<BR>路	Transformation tool to transform PIM to PSM for a client front-end written in JSP<BR>Each of these transformation tools is explained in great detail, and the depicted such that it is very easy for reader to follow the path of how the transformation is/should be done. The authors then talks about the transformation tools that take each PSM and transform it to Code. It is at every step of the way, from creating the PIM to Code, the authors spend a great deal of time explaining how MDA is introducing a new way of doing things better, faster and more efficiently. <BR>Metamodels and metalanguages are covered in chapter 8. A Model is written is a Language, which is defined by a Metamodel, which is written in a Metalanguage. MDA follows the same pattern. The metalanguage in which MDA is written is called the MOF. The metamodel for the MDA are written in MOF, and the modeling itself is done via UML. All the standards that are covered under OMG are covered in chapter 11, and is very interesting to see how pieces fit together, and how the "stack" is being built. <BR>All and all, Anneke Kleppe, et. al. did an extraordinary job in putting this book together. MDA is a buzz word that we have been here for sometime now, and it is great to finally have a book such as MDA Explained that clarifies the concepts and sheds some light on what's coming and what to expect.</span>
                  
                    <div class="CustomerReviewSummary">A vision of the future?</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>4</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>4</span>
                      /
                      <span>4</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2003-10-30</span>
                    </div>
                    <span>If you are interested in Model Driven Architecture (MDA) but you don't have a clear grasp of what it is or where the designers of MDA see it heading then you might want to pick up this brief, well-written description written by three authors who are well acquainted with MDA. <P>MDA is the concept of using models developed using a modeling language (UML) to generate real applications. This book can be seen as a high level overview of MDA and at 150 pages it is a fairly easy and quick read. The authors show both what is available today (not too much) and what might be available in the future (perhaps all applications will be generated from models). The authors do try to make the book practical by showing how you can use modeling tools to at least build skeletons of code that can be the start of code development. MDA brings a new set of acronyms but this book explains each of them without too much pain. <P>So how much of what is discussed here is needed by a typical developer or designer? Probably not too much. But if you want to keep your eye on the future of IT then this book is well worth the read. Perhaps one day writing code will be thought of the same way we think of writing machine language. When that happens you will be able to say you knew it was coming.</span>
                  
                    <div class="CustomerReviewSummary">Visionaries or unrealistic idealists? I don't know.</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>4</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>10</span>
                      /
                      <span>12</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2003-09-01</span>
                    </div>
                    <span>The authors of this book are either visionaries or unrealistic dreamers, and at this point I am not sure which it is. MDA is an acronym for Model Driven Architecture and it is a framework based on the Unified Modeling Language (UML) and other standards for representing software designs. Their main premise is that software development will eventually start with a Platform Independent Model (PIM) which represents the design of a solution to a problem. As the name implies, this is a model that does not incorporate anything that is specific to any platform.<BR> After the PIM is created, it is transformed into one or more Platform Specific Models (PSMs), each of which is specific to a particular platform. Each of the PSM's is then acted on by a platform specific conversion tool that will create the coded solution for that platform that conforms to the PSM specifications. They argue that since this step will be electronically executed, the point will eventually be reached where code is no longer written by humans. <BR> The authors are quite correct in pointing out the historical sequence of software development, which started with programming and constructing the computer being simultaneous events. This was followed by the development of assembly language and then the compiler, which raised the level of abstraction and caused a great deal of the code creation process to be automated. They use this background to argue that the MDA is several layers above that and a natural step in the upward movement of abstraction.<BR> While I certainly agree that the movement in programming has been to higher levels of abstraction and more code being automatically generated, I did not find their arguments convincing. They use several examples of automatic code generation that can proceed from a model, one of which is the generation of setter and getter functions. The problem as I see it is that creating setter and getter functions for private instance variables is the easiest programming task of all. In my opinion, going from this to creating code to solve complex tasks is not a difference in degree, but a difference in kind. <BR> Granted, the authors admit that the MDA is still in the preliminary stages, but all of us have heard stories about how tools such as web page creators continue to fail in many ways. Abstraction and automation of software have allowed developers to write programs with millions of lines of code, but there is every reason to believe that there is a limit as to how high the level of abstraction can go before it exceeds the capacity of humans to understand. Furthermore, if the tools that go from the MDA to the code do not create the precise solution, it is quite likely that the level of detail that one can write into the MDA will not be fine enough to represent all possible desired alterations from the automatically generated code. One simply cannot write all of what could be an enormous number of options into any conversion tool.<BR> Finally, if there are errors in the code generated from the MDA, debugging it would probably be impossible. The software development community finds it very difficult to write bug-free software, even when it is written by hand and meticulously examined. Since the conversion tools would be software that would most likely contain errors, then anyone debugging the code from an MDA would be looking through software that was automatically generated from a model that may be flawed by a program that is most certainly flawed. <BR> To conclude, I did find the book interesting and believe that some of what the authors envision will come true. However, at this time, it is clear that most of it will not happen in the near future. Our understanding of the software process is still too primitive to have the entire project successfully generated electronically from a model. There is also reason to believe that it is impossible.</span>
                  
                    <div class="CustomerReviewSummary">Warning - The book influence your mindset</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>9</span>
                      /
                      <span>10</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2003-05-19</span>
                    </div>
                    <span>MDA Explained written by Anneke Kleppe, Jos Warmer and Wim Bast is an excellent easy-to-follow book, understandable for a wide audience. This book is an absolute must for every professional involved in software development<P>The MDA book explains Model Driven Architecture (MDA) in easy-to-follow steps.<P>The tour begins with the disadvantages of traditional software development and follows with explaining how MDA can solve these traditional software development problems.<P>The book step for step explains, in more and more details, the MDA framework, and gives answers on the following topics; What is a model; How is the relationship between the models arranged; What kind of models are there; What are transformations and so on.<P>The book guides the reader with easy to understand examples, the combination of straight to the point text, and clear and understandable examples guaranties that the reader gets the complete MDA picture, in less then a day reading.<P>I like to give one warning for the readers of this book; 'The book influences your software development mindset', your software development approach will never be the same again after reading this book.<P>Have fun reading<P>Dino Seelig, ITIS Informatisering.</span>
                  
              
</td></tr></table>
            </td>
            <td class="ReviewSideBar">
              <div class="ItemCaption">Customers also bought:</div>
              
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0201788918'>
                      MDA Distilled (Addison-Wesley Object Technology Series)
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.5 based on 2 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0201748045'>
                      Executable UML: A Foundation for Model Driven Architecture
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.3 based on 8 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0471319201'>
                      Model Driven Architecture: Applying MDA to Enterprise Computing
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.7 based on 6 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=032111230X'>
                      Enterprise Patterns and MDA : Building Better Software with Archetype Patterns and UML (Addison-Wesley Object Technology Series)
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.7 based on 3 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0321179366'>
                      The Object Constraint Language: Getting Your Models Ready for MDA, Second Edition
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.3 based on 4 reviews</div>
                  </div>
                
              <div class="GoogleBookAd">
                <script type="text/javascript"><!--
                google_ad_client = "pub-8264790134546506";
                google_ad_width = 160;
                google_ad_height = 600;
                google_ad_format = "160x600_as";
                google_ad_channel ="4375045039";
                google_color_border = "CCCCCC";
                google_color_bg = "FFFFFF";
                google_color_link = "000000";
                google_color_url = "666666";
                google_color_text = "333333";
                //--></script>
                <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
                </script>
              </div>
            </td>
          </tr>
        </table>
      </div>
    </form>
  </body>
</HTML>
