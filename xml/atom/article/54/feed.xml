<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <title>Less is better: RubyCLR update</title>
  <subtitle type="html">John Lam on software</subtitle>
  <id>tag:www.iunknown.com,2005:Typo</id>
  <generator uri="http://www.typosphere.org" version="4.0">Typo</generator>
  <link href="http://www.iunknown.com/xml/atom/article/54/feed.xml" rel="self" type="application/atom+xml"/>
  <link href="http://www.iunknown.com/articles/2006/01/11/rubyclr-update" rel="alternate" type="text/html"/>
  <updated>2006-08-21T15:55:40-07:00</updated>
  <entry>
    <author>
      <name>John Lam</name>
      <email>jlam@iunknown.com</email>
    </author>
    <id>urn:uuid:ded88ee59c088fd26675a2321bdeaa3c</id>
    <published>2006-01-11T13:30:00-08:00</published>
    <updated>2006-08-21T15:55:40-07:00</updated>
    <title type="html">RubyCLR update</title>
    <link href="http://www.iunknown.com/articles/2006/01/11/rubyclr-update" rel="alternate" type="text/html"/>
    <category term="thoughts" scheme="http://www.iunknown.com/articles/category/thoughts" label="Thoughts"/>
    <summary type="html">&lt;p&gt;I&amp;#8217;ve been spending a surprising amount of time working on my Ruby &lt;span class="caps"&gt;CLR&lt;/span&gt; bridge. Ben sleeps on/around me for about 3 hours in the evening to give Carolyn 3 hours of uninterrupted sleep, and I&amp;#8217;ve been using that time very productively to add features.&lt;/p&gt;


	&lt;p&gt;The older version of the bridge that I had working was a grotesque hack &amp;#8211; it was essentially a bunch of experiments cobbled together in a Frankenstein-esque contraption. Anyone who has a copy of that code is respectfully asked to destroy it once I ship any of these newer bits.&lt;/p&gt;


	&lt;p&gt;One of the big things that I&amp;#8217;ve been working on is getting a seamless array experience. I marshal data types between the &lt;span class="caps"&gt;CLR&lt;/span&gt; and Ruby by value where possible, and by reference in all other cases. So value types like floating point numbers and integers are marshaled by value (aka copied and converted) across the runtime boundaries. So code like this just works:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
static array&amp;lt;int&amp;gt;^ StaticGetOneDimensionalArray() {
  return gcnew array&amp;lt;int&amp;gt; { 0, 1, 2, 3 };
}

a = MarshalerTests.StaticGetOneDimensionalArray
assert_equal 0, a[0]
assert_equal 4, a.Length
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;As you can see, I marshal by reference the array from the C++ function. But all of the elements of the array are marshaled by value, which lets me treat them as if they were native Ruby numbers.&lt;/p&gt;


	&lt;p&gt;I&amp;#8217;ve also done a ton of performance work in this release. If you&amp;#8217;re calling a method that has overloads, I take a slower path where I have to lookup at runtime the correct method based on the parameters that you&amp;#8217;re passing. However, if the method doesn&amp;#8217;t have any overloads, I generate a different shim that doesn&amp;#8217;t do any runtime lookups &amp;#8211; it just pushes parameters onto the call stack and invokes the method. The array code that you see above calls &lt;code&gt;Array.Get&lt;/code&gt; which is &lt;strong&gt;not&lt;/strong&gt; overloaded (unlike &lt;code&gt;Array.GetValue&lt;/code&gt; which is) which results in extremely fast &lt;span class="caps"&gt;CLR&lt;/span&gt; array element access from Ruby.&lt;/p&gt;


	&lt;p&gt;I&amp;#8217;m punting on some hard problems like generics for the time being. I have to add support for events before I ship this release; if Ben cooperates that should be by the end of this week.&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;I&amp;#8217;ve been spending a surprising amount of time working on my Ruby &lt;span class="caps"&gt;CLR&lt;/span&gt; bridge. Ben sleeps on/around me for about 3 hours in the evening to give Carolyn 3 hours of uninterrupted sleep, and I&amp;#8217;ve been using that time very productively to add features.&lt;/p&gt;


	&lt;p&gt;The older version of the bridge that I had working was a grotesque hack &amp;#8211; it was essentially a bunch of experiments cobbled together in a Frankenstein-esque contraption. Anyone who has a copy of that code is respectfully asked to destroy it once I ship any of these newer bits.&lt;/p&gt;


	&lt;p&gt;One of the big things that I&amp;#8217;ve been working on is getting a seamless array experience. I marshal data types between the &lt;span class="caps"&gt;CLR&lt;/span&gt; and Ruby by value where possible, and by reference in all other cases. So value types like floating point numbers and integers are marshaled by value (aka copied and converted) across the runtime boundaries. So code like this just works:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
static array&amp;lt;int&amp;gt;^ StaticGetOneDimensionalArray() {
  return gcnew array&amp;lt;int&amp;gt; { 0, 1, 2, 3 };
}

a = MarshalerTests.StaticGetOneDimensionalArray
assert_equal 0, a[0]
assert_equal 4, a.Length
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;As you can see, I marshal by reference the array from the C++ function. But all of the elements of the array are marshaled by value, which lets me treat them as if they were native Ruby numbers.&lt;/p&gt;


	&lt;p&gt;I&amp;#8217;ve also done a ton of performance work in this release. If you&amp;#8217;re calling a method that has overloads, I take a slower path where I have to lookup at runtime the correct method based on the parameters that you&amp;#8217;re passing. However, if the method doesn&amp;#8217;t have any overloads, I generate a different shim that doesn&amp;#8217;t do any runtime lookups &amp;#8211; it just pushes parameters onto the call stack and invokes the method. The array code that you see above calls &lt;code&gt;Array.Get&lt;/code&gt; which is &lt;strong&gt;not&lt;/strong&gt; overloaded (unlike &lt;code&gt;Array.GetValue&lt;/code&gt; which is) which results in extremely fast &lt;span class="caps"&gt;CLR&lt;/span&gt; array element access from Ruby.&lt;/p&gt;


	&lt;p&gt;I&amp;#8217;m punting on some hard problems like generics for the time being. I have to add support for events before I ship this release; if Ben cooperates that should be by the end of this week.&lt;/p&gt;</content>
  </entry>
  <entry>
    <author>
      <name>Pillangószív</name>
    </author>
    <id>urn:uuid:a9650e52-5067-48cf-a481-8a42b2c84dd0</id>
    <published>2006-09-24T04:04:30-07:00</published>
    <updated>2006-09-28T12:51:26-07:00</updated>
    <title type="html">Comment on RubyCLR update by Pillangószív</title>
    <link href="http://www.iunknown.com/articles/2006/01/11/rubyclr-update#comment-1008" rel="alternate" type="text/html"/>
    <content type="html">&lt;p&gt;Wow, its funny:)&lt;/p&gt;</content>
  </entry>
  <entry>
    <author>
      <name>Christian Mogensen</name>
    </author>
    <id>urn:uuid:</id>
    <published>2006-01-12T04:19:32-08:00</published>
    <updated>2006-08-21T20:56:26-07:00</updated>
    <title type="html">Comment on RubyCLR update by Christian Mogensen</title>
    <link href="http://www.iunknown.com/articles/2006/01/11/rubyclr-update#comment-293" rel="alternate" type="text/html"/>
    <content type="html">&lt;p&gt;RubyCLR - you rock! &lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;You know - you could parlay this into a steady stream of baby-sitters from a grateful CLR community :-)&lt;/p&gt;</content>
  </entry>
</feed>
