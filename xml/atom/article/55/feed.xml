<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <title>Less is better: Events and RubyCLR</title>
  <subtitle type="html">John Lam on software</subtitle>
  <id>tag:www.iunknown.com,2005:Typo</id>
  <generator uri="http://www.typosphere.org" version="4.0">Typo</generator>
  <link href="http://www.iunknown.com/xml/atom/article/55/feed.xml" rel="self" type="application/atom+xml"/>
  <link href="http://www.iunknown.com/articles/2006/01/12/events-and-rubyclr" rel="alternate" type="text/html"/>
  <updated>2006-08-21T15:55:40-07:00</updated>
  <entry>
    <author>
      <name>John Lam</name>
      <email>jlam@iunknown.com</email>
    </author>
    <id>urn:uuid:d3b7ccb859e680ba580c0883c4531d7d</id>
    <published>2006-01-12T10:20:00-08:00</published>
    <updated>2006-08-21T15:55:40-07:00</updated>
    <title type="html">Events and RubyCLR</title>
    <link href="http://www.iunknown.com/articles/2006/01/12/events-and-rubyclr" rel="alternate" type="text/html"/>
    <category term="thoughts" scheme="http://www.iunknown.com/articles/category/thoughts" label="Thoughts"/>
    <summary type="html">&lt;p&gt;I got events up and running last night. It was a bit harder than I anticipated, and there&amp;#8217;s still a bit of work that needs to be done around marshaling, but this unit test now passes:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
public ref class CallbackTests {
public:
  event EventHandler^ Event;

  void CallMeBack() {
    Event(nullptr, EventArgs::Empty);
  }
};

class EventTests &amp;lt; Test::Unit::TestCase
  def test_simple_event
    c = System::CallbackTests.new
    c.Event do |sender, args|
      assert_equal 1, 1
    end
    c.CallMeBack
  end
end
&lt;/code&gt;&lt;/pre&gt;</summary>
    <content type="html">&lt;p&gt;I got events up and running last night. It was a bit harder than I anticipated, and there&amp;#8217;s still a bit of work that needs to be done around marshaling, but this unit test now passes:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
public ref class CallbackTests {
public:
  event EventHandler^ Event;

  void CallMeBack() {
    Event(nullptr, EventArgs::Empty);
  }
};

class EventTests &amp;lt; Test::Unit::TestCase
  def test_simple_event
    c = System::CallbackTests.new
    c.Event do |sender, args|
      assert_equal 1, 1
    end
    c.CallMeBack
  end
end
&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>
</feed>
