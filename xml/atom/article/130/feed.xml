<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <title>Less is better: Do you have a spare 20 minutes to become a better programmer?</title>
  <subtitle type="html">John Lam on software</subtitle>
  <id>tag:www.iunknown.com,2005:Typo</id>
  <generator uri="http://www.typosphere.org" version="4.0">Typo</generator>
  <link href="http://www.iunknown.com/xml/atom/article/130/feed.xml" rel="self" type="application/atom+xml"/>
  <link href="http://www.iunknown.com/articles/2006/05/09/do-you-have-a-spare-20-minutes-to-become-a-better-programmer" rel="alternate" type="text/html"/>
  <updated>2006-08-21T15:55:42-07:00</updated>
  <entry>
    <author>
      <name>John Lam</name>
      <email>jlam@iunknown.com</email>
    </author>
    <id>urn:uuid:751330450ae0da34b129e15d4a8c7192</id>
    <published>2006-05-09T23:54:00-07:00</published>
    <updated>2006-08-21T15:55:42-07:00</updated>
    <title type="html">Do you have a spare 20 minutes to become a better programmer?</title>
    <link href="http://www.iunknown.com/articles/2006/05/09/do-you-have-a-spare-20-minutes-to-become-a-better-programmer" rel="alternate" type="text/html"/>
    <category term="links" scheme="http://www.iunknown.com/articles/category/links" label="Props"/>
    <summary type="html">&lt;p&gt;If you, then you should head on over and &lt;a href="http://defmacro.org/ramblings/lisp.html"&gt;read this article on how to become a better programmer.&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;Seriously. This is by far the most approachable article that I&amp;#8217;ve read to motivate &lt;strong&gt;why&lt;/strong&gt; Lisp is still the gold standard of language design. It does so in a very non-threatening way by way of &lt;span class="caps"&gt;XML&lt;/span&gt; and &lt;a href="http://ant.apache.org/"&gt;Ant&lt;/a&gt;, as well as the C preprocessor and &lt;a href="http://www.codegeneration.net"&gt;code generation&lt;/a&gt;. He even mentions data access layers, C# and &lt;span class="caps"&gt;LINQ&lt;/span&gt; to prove that he&amp;#8217;s not living in a shack in the wilds of Montana.&lt;/p&gt;


	&lt;p&gt;Perhaps the most insightful part of this article is the realization of &lt;em&gt;why&lt;/em&gt; XML enabled Ant to become so popular. &lt;span class="caps"&gt;XML&lt;/span&gt; is enormously flexible (at the cost of being enormously verbose), and it permitted the injection of new &lt;em&gt;semantics&lt;/em&gt; into the build language, that would not be as approachable using Java alone.&lt;/p&gt;


	&lt;p&gt;Once you&amp;#8217;ve read (and understood) this article, you&amp;#8217;ll be well on your way to understanding why metaprogramming and domain specific languages are so powerful. This will make you a far better programmer even if you use a relatively pedestrian language like Ruby :)&lt;/p&gt;


	&lt;p&gt;If you want to read more about Lisp, you can begin by &lt;a href="http://www.gigamonkeys.com/book/"&gt;reading this wonderful online book.&lt;/a&gt;&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;If you, then you should head on over and &lt;a href="http://defmacro.org/ramblings/lisp.html"&gt;read this article on how to become a better programmer.&lt;/a&gt;&lt;/p&gt;


	&lt;p&gt;Seriously. This is by far the most approachable article that I&amp;#8217;ve read to motivate &lt;strong&gt;why&lt;/strong&gt; Lisp is still the gold standard of language design. It does so in a very non-threatening way by way of &lt;span class="caps"&gt;XML&lt;/span&gt; and &lt;a href="http://ant.apache.org/"&gt;Ant&lt;/a&gt;, as well as the C preprocessor and &lt;a href="http://www.codegeneration.net"&gt;code generation&lt;/a&gt;. He even mentions data access layers, C# and &lt;span class="caps"&gt;LINQ&lt;/span&gt; to prove that he&amp;#8217;s not living in a shack in the wilds of Montana.&lt;/p&gt;


	&lt;p&gt;Perhaps the most insightful part of this article is the realization of &lt;em&gt;why&lt;/em&gt; XML enabled Ant to become so popular. &lt;span class="caps"&gt;XML&lt;/span&gt; is enormously flexible (at the cost of being enormously verbose), and it permitted the injection of new &lt;em&gt;semantics&lt;/em&gt; into the build language, that would not be as approachable using Java alone.&lt;/p&gt;


	&lt;p&gt;Once you&amp;#8217;ve read (and understood) this article, you&amp;#8217;ll be well on your way to understanding why metaprogramming and domain specific languages are so powerful. This will make you a far better programmer even if you use a relatively pedestrian language like Ruby :)&lt;/p&gt;


	&lt;p&gt;If you want to read more about Lisp, you can begin by &lt;a href="http://www.gigamonkeys.com/book/"&gt;reading this wonderful online book.&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <author>
      <name>Thibaut Barrere</name>
    </author>
    <id>urn:uuid:</id>
    <published>2006-05-12T03:31:17-07:00</published>
    <updated>2006-08-21T19:07:29-07:00</updated>
    <title type="html">Comment on Do you have a spare 20 minutes to become a better programmer? by Thibaut Barrere</title>
    <link href="http://www.iunknown.com/articles/2006/05/09/do-you-have-a-spare-20-minutes-to-become-a-better-programmer#comment-470" rel="alternate" type="text/html"/>
    <content type="html">&lt;p&gt;Thanks for those links - the article is really good, I'm definitely going to look into the online book.&lt;/p&gt;

&lt;p&gt;cheers and keep up with the good work on RubyCLR.&lt;/p&gt;</content>
  </entry>
  <entry>
    <author>
      <name>Thibaut Barrere</name>
    </author>
    <id>urn:uuid:</id>
    <published>2006-05-12T03:30:25-07:00</published>
    <updated>2006-08-21T19:07:28-07:00</updated>
    <title type="html">Comment on Do you have a spare 20 minutes to become a better programmer? by Thibaut Barrere</title>
    <link href="http://www.iunknown.com/articles/2006/05/09/do-you-have-a-spare-20-minutes-to-become-a-better-programmer#comment-469" rel="alternate" type="text/html"/>
    <content type="html">&lt;p&gt;Thanks for those links - the article is really good, I'm definitely going to look into the online book.&lt;/p&gt;

&lt;p&gt;cheers and keep up with the good work on RubyCLR.&lt;/p&gt;</content>
  </entry>
</feed>
