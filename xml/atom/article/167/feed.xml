<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <title>Less is better: RubyCLR and method name conflicts</title>
  <subtitle type="html">John Lam on software</subtitle>
  <id>tag:www.iunknown.com,2005:Typo</id>
  <generator uri="http://www.typosphere.org" version="4.0">Typo</generator>
  <link href="http://www.iunknown.com/xml/atom/article/167/feed.xml" rel="self" type="application/atom+xml"/>
  <link href="http://www.iunknown.com/articles/2006/06/09/rubyclr-and-method-name-conflicts" rel="alternate" type="text/html"/>
  <updated>2006-08-21T15:55:43-07:00</updated>
  <entry>
    <author>
      <name>John Lam</name>
      <email>jlam@iunknown.com</email>
    </author>
    <id>urn:uuid:a8eda397d529841edd6022ed1fd20ab8</id>
    <published>2006-06-09T23:18:00-07:00</published>
    <updated>2006-08-21T15:55:43-07:00</updated>
    <title type="html">RubyCLR and method name conflicts</title>
    <link href="http://www.iunknown.com/articles/2006/06/09/rubyclr-and-method-name-conflicts" rel="alternate" type="text/html"/>
    <category term="thoughts" scheme="http://www.iunknown.com/articles/category/thoughts" label="Thoughts"/>
    <summary type="html">&lt;p&gt;RubyCLR uses &lt;code&gt;method_missing&lt;/code&gt; to dynamically bind and generate shim methods to call &lt;span class="caps"&gt;CLR&lt;/span&gt; methods. But what happens if there&amp;#8217;s a name conflict with a method in a base class or a mixin?&lt;/p&gt;


	&lt;p&gt;I just ran into this today while updating all of the samples to run on the latest bits. Since I&amp;#8217;m now integrating &lt;code&gt;ActiveRecord&lt;/code&gt; support into RubyCLR, I found that calls to &lt;code&gt;XamlReader.load()&lt;/code&gt; wouldn&amp;#8217;t work. Digging a bit deeper, this was due to &lt;code&gt;ActiveSupport&lt;/code&gt; defining a &lt;code&gt;load&lt;/code&gt; method on the &lt;code&gt;Object&lt;/code&gt; class. The way to fix this problem is to simply call &lt;code&gt;XamlReader.Load&lt;/code&gt;, which is the &amp;#8220;real&amp;#8221; name of the method (as defined in the library).&lt;/p&gt;


	&lt;p&gt;Now, how can I make this experience suck less for less experienced users? Should I reflect over all of the methods of the &lt;span class="caps"&gt;CLR&lt;/span&gt; type when I create the Ruby shadow class for the &lt;span class="caps"&gt;CLR&lt;/span&gt; class and issue a &amp;#8216;warning&amp;#8217; when it discovers method conflicts?&lt;/p&gt;


	&lt;p&gt;Suggestions welcome.&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;RubyCLR uses &lt;code&gt;method_missing&lt;/code&gt; to dynamically bind and generate shim methods to call &lt;span class="caps"&gt;CLR&lt;/span&gt; methods. But what happens if there&amp;#8217;s a name conflict with a method in a base class or a mixin?&lt;/p&gt;


	&lt;p&gt;I just ran into this today while updating all of the samples to run on the latest bits. Since I&amp;#8217;m now integrating &lt;code&gt;ActiveRecord&lt;/code&gt; support into RubyCLR, I found that calls to &lt;code&gt;XamlReader.load()&lt;/code&gt; wouldn&amp;#8217;t work. Digging a bit deeper, this was due to &lt;code&gt;ActiveSupport&lt;/code&gt; defining a &lt;code&gt;load&lt;/code&gt; method on the &lt;code&gt;Object&lt;/code&gt; class. The way to fix this problem is to simply call &lt;code&gt;XamlReader.Load&lt;/code&gt;, which is the &amp;#8220;real&amp;#8221; name of the method (as defined in the library).&lt;/p&gt;


	&lt;p&gt;Now, how can I make this experience suck less for less experienced users? Should I reflect over all of the methods of the &lt;span class="caps"&gt;CLR&lt;/span&gt; type when I create the Ruby shadow class for the &lt;span class="caps"&gt;CLR&lt;/span&gt; class and issue a &amp;#8216;warning&amp;#8217; when it discovers method conflicts?&lt;/p&gt;


	&lt;p&gt;Suggestions welcome.&lt;/p&gt;</content>
  </entry>
  <entry>
    <author>
      <name>Patrick Parks</name>
    </author>
    <id>urn:uuid:</id>
    <published>2006-07-28T07:09:25-07:00</published>
    <updated>2006-08-21T19:04:49-07:00</updated>
    <title type="html">Comment on RubyCLR and method name conflicts by Patrick Parks</title>
    <link href="http://www.iunknown.com/articles/2006/06/09/rubyclr-and-method-name-conflicts#comment-611" rel="alternate" type="text/html"/>
    <content type="html">&lt;p&gt;John,&lt;/p&gt;

&lt;p&gt;I'm just getting started with RubyCLR so don't have a lot of context to ask my questions.  But I have worked on building reflection-based interfaces from dynamical languages to Java.  In that work, I ran into similar issue with name conflicts myself.&lt;/p&gt;

&lt;p&gt;Have you decided how to resolve this issue of name resolution for base classes / mixins???  I didn't see any comments or follow up on this other than 28 iterations of Nice Site / Thank You.&lt;/p&gt;

&lt;p&gt;I would also like to know how you handle name resolution between classes when the same name occurs in several required libraries.  My question is whether you choose one and push ahead happily (as the saltypickle bridge appeared to do) or give an error (and in a dynamic language that means what runs fine one day suddenly stops working the next day).  Both approaches have pros and cons but neither of them make me very happy.  I'm curious how you approach this problem in RubyCLR.&lt;/p&gt;

&lt;p&gt;Finally, where do you suggest I start reading your blogs in order to track your adventure with building RubyCLR.  I'm especially interested in your decision making process and what you have learned about dynamic binding to CLR and CIL code generation.&lt;/p&gt;

&lt;p&gt;THANKS... NICE SITE &lt;/p&gt;

&lt;p&gt;Pat&lt;/p&gt;</content>
  </entry>
</feed>
