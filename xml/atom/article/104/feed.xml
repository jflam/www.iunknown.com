<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <title>Less is better: Interface implementation in RubyCLR</title>
  <subtitle type="html">John Lam on software</subtitle>
  <id>tag:www.iunknown.com,2005:Typo</id>
  <generator uri="http://www.typosphere.org" version="4.0">Typo</generator>
  <link href="http://www.iunknown.com/xml/atom/article/104/feed.xml" rel="self" type="application/atom+xml"/>
  <link href="http://www.iunknown.com/articles/2006/03/29/interface-implementation-in-rubyclr" rel="alternate" type="text/html"/>
  <updated>2006-08-21T15:55:41-07:00</updated>
  <entry>
    <author>
      <name>John Lam</name>
      <email>jlam@iunknown.com</email>
    </author>
    <id>urn:uuid:b564f797226ee132fc539e27e5a99d1f</id>
    <published>2006-03-29T12:32:00-08:00</published>
    <updated>2006-08-21T15:55:41-07:00</updated>
    <title type="html">Interface implementation in RubyCLR</title>
    <link href="http://www.iunknown.com/articles/2006/03/29/interface-implementation-in-rubyclr" rel="alternate" type="text/html"/>
    <category term="thoughts" scheme="http://www.iunknown.com/articles/category/thoughts" label="Thoughts"/>
    <summary type="html">&lt;p&gt;Over lunch today I hacked out a quick first pass at defining a dynamic type that understands how to implement the &lt;a href="http://msdn2.microsoft.com/en-US/library/system.idisposable(VS.80).aspx"&gt;IDisposable&lt;/a&gt; interface. In a nutshell, RubyCLR will define an &amp;#8220;anonymous type&amp;#8221; in a dynamic assembly that maps to its corresponding Ruby class object. I&amp;#8217;ll generate this dynamic type on the fly and marshal Ruby objects to the &lt;span class="caps"&gt;CLR&lt;/span&gt; as instances of that type (this is a gross simplification, but bear with me). This way Ruby objects can implement arbitrary &lt;span class="caps"&gt;CLR&lt;/span&gt; interfaces, and I can also provide mixin implementations for common ones like &lt;code&gt;IDisposable&lt;/code&gt; or &lt;a href="http://msdn2.microsoft.com/en-us/library/system.componentmodel.ibindinglist(VS.80).aspx"&gt;IBindingList&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;Here&amp;#8217;s the quick and dirty C# implementation that demonstrates how to make this happen:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
static Type CreateBindableObject() {
  AppDomain currentDomain = AppDomain.CurrentDomain;

  AssemblyName assemblyName 
    = new AssemblyName("AnonymousRubyInteropAssembly");

  AssemblyBuilder assemblyBuilder 
    = currentDomain.DefineDynamicAssembly(assemblyName, 
                                          AssemblyBuilderAccess.Run);
  ModuleBuilder moduleBuilder 
    = assemblyBuilder.DefineDynamicModule("AnonymousRubyInteropModule");

  TypeBuilder typeBuilder 
    = moduleBuilder.DefineType("AnonymousInteropShim", 
                               TypeAttributes.Public);

  typeBuilder.AddInterfaceImplementation(typeof(IDisposable));

  MethodBuilder methodBuilder 
    = typeBuilder.DefineMethod("Dispose", 
                               MethodAttributes.Public 
                               | MethodAttributes.Virtual, 
                               typeof(void), 
                               new Type[] { });

  ILGenerator g = methodBuilder.GetILGenerator();

  Type consoleType = typeof(Console);
  MethodInfo mi = typeof(Console).GetMethod("WriteLine", 
                                            new Type[] { typeof(string) });

  g.Emit(OpCodes.Ldstr, "Disposed!");
  g.Emit(OpCodes.Call, mi);
  g.Emit(OpCodes.Ret);

  return typeBuilder.CreateType();
}

static void Main(string[] args) {
  Type t = CreateBindableObject();
  using (IDisposable obj = (IDisposable)Activator.CreateInstance(t)) {
    Console.WriteLine("using object");
  }
}
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;I would imagine that RubyCLR will eventually support a syntax that looks like:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class DisposableRubyObject
  implements IDisposable

  def dispose
    Console.write_line 'disposed!'
  end
end
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;where the &lt;code&gt;implements&lt;/code&gt; method is some syntactical sugar around &lt;code&gt;include&lt;/code&gt;.&lt;/p&gt;


	&lt;p&gt;This should make it much easier for me to support data binding scenarios. The current databinding stuff is all hard-coded, and this technique is far more flexible.&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Over lunch today I hacked out a quick first pass at defining a dynamic type that understands how to implement the &lt;a href="http://msdn2.microsoft.com/en-US/library/system.idisposable(VS.80).aspx"&gt;IDisposable&lt;/a&gt; interface. In a nutshell, RubyCLR will define an &amp;#8220;anonymous type&amp;#8221; in a dynamic assembly that maps to its corresponding Ruby class object. I&amp;#8217;ll generate this dynamic type on the fly and marshal Ruby objects to the &lt;span class="caps"&gt;CLR&lt;/span&gt; as instances of that type (this is a gross simplification, but bear with me). This way Ruby objects can implement arbitrary &lt;span class="caps"&gt;CLR&lt;/span&gt; interfaces, and I can also provide mixin implementations for common ones like &lt;code&gt;IDisposable&lt;/code&gt; or &lt;a href="http://msdn2.microsoft.com/en-us/library/system.componentmodel.ibindinglist(VS.80).aspx"&gt;IBindingList&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;Here&amp;#8217;s the quick and dirty C# implementation that demonstrates how to make this happen:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
static Type CreateBindableObject() {
  AppDomain currentDomain = AppDomain.CurrentDomain;

  AssemblyName assemblyName 
    = new AssemblyName("AnonymousRubyInteropAssembly");

  AssemblyBuilder assemblyBuilder 
    = currentDomain.DefineDynamicAssembly(assemblyName, 
                                          AssemblyBuilderAccess.Run);
  ModuleBuilder moduleBuilder 
    = assemblyBuilder.DefineDynamicModule("AnonymousRubyInteropModule");

  TypeBuilder typeBuilder 
    = moduleBuilder.DefineType("AnonymousInteropShim", 
                               TypeAttributes.Public);

  typeBuilder.AddInterfaceImplementation(typeof(IDisposable));

  MethodBuilder methodBuilder 
    = typeBuilder.DefineMethod("Dispose", 
                               MethodAttributes.Public 
                               | MethodAttributes.Virtual, 
                               typeof(void), 
                               new Type[] { });

  ILGenerator g = methodBuilder.GetILGenerator();

  Type consoleType = typeof(Console);
  MethodInfo mi = typeof(Console).GetMethod("WriteLine", 
                                            new Type[] { typeof(string) });

  g.Emit(OpCodes.Ldstr, "Disposed!");
  g.Emit(OpCodes.Call, mi);
  g.Emit(OpCodes.Ret);

  return typeBuilder.CreateType();
}

static void Main(string[] args) {
  Type t = CreateBindableObject();
  using (IDisposable obj = (IDisposable)Activator.CreateInstance(t)) {
    Console.WriteLine("using object");
  }
}
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;I would imagine that RubyCLR will eventually support a syntax that looks like:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class DisposableRubyObject
  implements IDisposable

  def dispose
    Console.write_line 'disposed!'
  end
end
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;where the &lt;code&gt;implements&lt;/code&gt; method is some syntactical sugar around &lt;code&gt;include&lt;/code&gt;.&lt;/p&gt;


	&lt;p&gt;This should make it much easier for me to support data binding scenarios. The current databinding stuff is all hard-coded, and this technique is far more flexible.&lt;/p&gt;</content>
  </entry>
  <entry>
    <author>
      <name>Michael Trier</name>
    </author>
    <id>urn:uuid:</id>
    <published>2006-04-06T22:20:51-07:00</published>
    <updated>2006-08-21T19:08:00-07:00</updated>
    <title type="html">Comment on Interface implementation in RubyCLR by Michael Trier</title>
    <link href="http://www.iunknown.com/articles/2006/03/29/interface-implementation-in-rubyclr#comment-427" rel="alternate" type="text/html"/>
    <content type="html">&lt;p&gt;Would this allow me to implement something like this in Ruby:&lt;/p&gt;

&lt;p&gt;System.ComponentModel.IContainer components = new System.ComponentModel.Container();&lt;/p&gt;

&lt;p&gt;or is that functionality already baked in.  The reason I ask is because the current drop seems to be choking on it.&lt;/p&gt;</content>
  </entry>
</feed>
