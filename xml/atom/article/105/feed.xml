<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <title>Less is better: RubyCLR can now inline C#</title>
  <subtitle type="html">John Lam on software</subtitle>
  <id>tag:www.iunknown.com,2005:Typo</id>
  <generator uri="http://www.typosphere.org" version="4.0">Typo</generator>
  <link href="http://www.iunknown.com/xml/atom/article/105/feed.xml" rel="self" type="application/atom+xml"/>
  <link href="http://www.iunknown.com/articles/2006/03/29/rubyclr-can-now-inline-c" rel="alternate" type="text/html"/>
  <updated>2006-08-21T15:55:41-07:00</updated>
  <entry>
    <author>
      <name>John Lam</name>
      <email>jlam@iunknown.com</email>
    </author>
    <id>urn:uuid:e974ba13c4385088e7db5ad9856f6635</id>
    <published>2006-03-29T17:46:00-08:00</published>
    <updated>2006-08-21T15:55:41-07:00</updated>
    <title type="html">RubyCLR can now inline C#</title>
    <link href="http://www.iunknown.com/articles/2006/03/29/rubyclr-can-now-inline-c" rel="alternate" type="text/html"/>
    <category term="thoughts" scheme="http://www.iunknown.com/articles/category/thoughts" label="Thoughts"/>
    <summary type="html">&lt;p&gt;RubyCLR now inlines C#:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class InliningTests &amp;lt; TestCase
  def test_class_inline
    Inline::compile :csharp, &amp;lt;&amp;lt;-EOF
      namespace Scratch {
        public class Fibonnaci {
          public static long Calc(long n) {
            long x1 = 1, x2 = 2, tmp;
            for (long i = 1; i &amp;lt; n; ++i) {
              x1 += x2;
              tmp = x2; x2 = x1; x1 = tmp;
            }
            return x1;
          }
        }
      }
    EOF

    assert_equal 8, Scratch::Fibonnaci.calc(5)
  end
end
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;I shell out to the C# compiler to compile the embedded C# source code. I&amp;#8217;ll be adding some code to inline C# methods as well so that you can define a Ruby method signature that has a C# implementation.&lt;/p&gt;


	&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Please disregard this grotesque hack. See the &lt;a href="http://www.iunknown.com/articles/2006/03/30/rubyclr-now-with-new-and-improved-inlining"&gt;new and improved version&lt;/a&gt;.&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;RubyCLR now inlines C#:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class InliningTests &amp;lt; TestCase
  def test_class_inline
    Inline::compile :csharp, &amp;lt;&amp;lt;-EOF
      namespace Scratch {
        public class Fibonnaci {
          public static long Calc(long n) {
            long x1 = 1, x2 = 2, tmp;
            for (long i = 1; i &amp;lt; n; ++i) {
              x1 += x2;
              tmp = x2; x2 = x1; x1 = tmp;
            }
            return x1;
          }
        }
      }
    EOF

    assert_equal 8, Scratch::Fibonnaci.calc(5)
  end
end
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;I shell out to the C# compiler to compile the embedded C# source code. I&amp;#8217;ll be adding some code to inline C# methods as well so that you can define a Ruby method signature that has a C# implementation.&lt;/p&gt;


	&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Please disregard this grotesque hack. See the &lt;a href="http://www.iunknown.com/articles/2006/03/30/rubyclr-now-with-new-and-improved-inlining"&gt;new and improved version&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <author>
      <name>John Lam</name>
    </author>
    <id>urn:uuid:</id>
    <published>2006-03-29T22:32:10-08:00</published>
    <updated>2006-08-21T19:08:22-07:00</updated>
    <title type="html">Comment on RubyCLR can now inline C# by John Lam</title>
    <link href="http://www.iunknown.com/articles/2006/03/29/rubyclr-can-now-inline-c#comment-415" rel="alternate" type="text/html"/>
    <content type="html">&lt;p&gt;When I hacked out this code I was in the library, and couldn't download RubyInline.  &lt;/p&gt;

&lt;p&gt;The C# compiler has a set of managed wrappers that let me pass a string, and it generates the temp file, compiles to a temp assembly and loads it all in one fell swoop. I suspect that RubyInline tries to do most of that stuff for me which I don't really need ...&lt;/p&gt;</content>
  </entry>
  <entry>
    <author>
      <name>Eric Hodel</name>
    </author>
    <id>urn:uuid:</id>
    <published>2006-03-29T20:59:59-08:00</published>
    <updated>2006-08-21T19:08:21-07:00</updated>
    <title type="html">Comment on RubyCLR can now inline C# by Eric Hodel</title>
    <link href="http://www.iunknown.com/articles/2006/03/29/rubyclr-can-now-inline-c#comment-414" rel="alternate" type="text/html"/>
    <content type="html">&lt;p&gt;You don't seem to be using RubyInline...&lt;/p&gt;

&lt;p&gt;It should be easy to plug right into it...&lt;/p&gt;</content>
  </entry>
</feed>
