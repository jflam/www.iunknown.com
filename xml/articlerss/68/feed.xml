<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Less is better comments on Enumerations in RubyCLR</title>
    <link>http://www.iunknown.com/</link>
    <language>en-us</language>
    <ttl>40</ttl>
    <description>Less is better comments</description>
    <item>
      <title>"Enumerations in RubyCLR": comment by John Lam</title>
      <description>&lt;p&gt;Thanks, Justin!&lt;/p&gt;

&lt;p&gt;I just ran into a nasty problem while thinking about implementing nested types (I need to do this now for even the simplest Windows Forms app since Form.Control is now an instance of nested type Form+ControlCollection). I'm hopeful to get something out this week. &lt;/p&gt;

&lt;p&gt;I hate nested types.&lt;/p&gt;</description>
      <pubDate>Wed, 15 Feb 2006 14:43:48 Eastern Standard Time</pubDate>
      <guid>http://www.iunknown.com/articles/2006/02/14/enumerations-in-rubyclr#comment-124</guid>
      <link>http://www.iunknown.com/articles/2006/02/14/enumerations-in-rubyclr#comment-124</link>
    </item>
    <item>
      <title>"Enumerations in RubyCLR": comment by Justin</title>
      <description>&lt;p&gt;John,&lt;/p&gt;

&lt;p&gt;I finally got .NET 2.0 installed. Any chance you have some new bits I can try out? Looks like you've made a lot of progress since the last time you posted them.&lt;/p&gt;

&lt;p&gt;p.s. Best wishes to your new baby :)&lt;/p&gt;</description>
      <pubDate>Wed, 15 Feb 2006 12:30:08 Eastern Standard Time</pubDate>
      <guid>http://www.iunknown.com/articles/2006/02/14/enumerations-in-rubyclr#comment-123</guid>
      <link>http://www.iunknown.com/articles/2006/02/14/enumerations-in-rubyclr#comment-123</link>
    </item>
    <item>
      <title>"Enumerations in RubyCLR" by jlam</title>
      <description>&lt;p&gt;I added enumerations support to RubyCLR today. It was a bit tricky since Ruby has no native support for enumerations (or user-defined value types), so I have to fake out enumerations using Ruby objects. For most scenarios, it feels very much like an enumeration would in C#.&lt;/p&gt;


	&lt;p&gt;Here&amp;#8217;s a simple Windows Forms MessageBox sample that uses enumerations:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
require 'rubyclr'

RubyClr::reference 'System.Windows.Forms'
include System::Windows::Forms

result = MessageBox.Show('Yes or no?', 'Answer this!', 
                         MessageBoxButtons::YesNo)
puts result.to_s
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;The &lt;code&gt;to_s&lt;/code&gt; method outputs the string value of the enum, in this case Yes or No based on which button the user clicks. I also support adding, subtracting and bitwise or operations against enumerations.&lt;/p&gt;


	&lt;p&gt;My overload resolution algorithm needs to account for implicit up-conversions to the enumeration&amp;#8217;s underlying type. That will be accounted for when I rewrite that algorithm beginning tomorrow.&lt;/p&gt;

</description>
      <pubDate>Tue, 14 Feb 2006 23:35:00 Eastern Standard Time</pubDate>
      <guid>&lt;a href="/articles/2006/02/14/enumerations-in-rubyclr"&gt;Enumerations in RubyCLR&lt;/a&gt;</guid>
      <link>&lt;a href="/articles/2006/02/14/enumerations-in-rubyclr"&gt;Enumerations in RubyCLR&lt;/a&gt;</link>
    </item>
  </channel>
</rss>
