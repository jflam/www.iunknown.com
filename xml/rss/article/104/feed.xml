<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/css" href="/stylesheets/rss.css"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Less is better: Interface implementation in RubyCLR</title>
    <link>http://www.iunknown.com/articles/2006/03/29/interface-implementation-in-rubyclr</link>
    <language>en-us</language>
    <ttl>40</ttl>
    <description>John Lam on software</description>
    <item>
      <title>Interface implementation in RubyCLR</title>
      <description>&lt;p&gt;Over lunch today I hacked out a quick first pass at defining a dynamic type that understands how to implement the &lt;a href="http://msdn2.microsoft.com/en-US/library/system.idisposable(VS.80).aspx"&gt;IDisposable&lt;/a&gt; interface. In a nutshell, RubyCLR will define an &amp;#8220;anonymous type&amp;#8221; in a dynamic assembly that maps to its corresponding Ruby class object. I&amp;#8217;ll generate this dynamic type on the fly and marshal Ruby objects to the &lt;span class="caps"&gt;CLR&lt;/span&gt; as instances of that type (this is a gross simplification, but bear with me). This way Ruby objects can implement arbitrary &lt;span class="caps"&gt;CLR&lt;/span&gt; interfaces, and I can also provide mixin implementations for common ones like &lt;code&gt;IDisposable&lt;/code&gt; or &lt;a href="http://msdn2.microsoft.com/en-us/library/system.componentmodel.ibindinglist(VS.80).aspx"&gt;IBindingList&lt;/a&gt;.&lt;/p&gt;


	&lt;p&gt;Here&amp;#8217;s the quick and dirty C# implementation that demonstrates how to make this happen:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
static Type CreateBindableObject() {
  AppDomain currentDomain = AppDomain.CurrentDomain;

  AssemblyName assemblyName 
    = new AssemblyName("AnonymousRubyInteropAssembly");

  AssemblyBuilder assemblyBuilder 
    = currentDomain.DefineDynamicAssembly(assemblyName, 
                                          AssemblyBuilderAccess.Run);
  ModuleBuilder moduleBuilder 
    = assemblyBuilder.DefineDynamicModule("AnonymousRubyInteropModule");

  TypeBuilder typeBuilder 
    = moduleBuilder.DefineType("AnonymousInteropShim", 
                               TypeAttributes.Public);

  typeBuilder.AddInterfaceImplementation(typeof(IDisposable));

  MethodBuilder methodBuilder 
    = typeBuilder.DefineMethod("Dispose", 
                               MethodAttributes.Public 
                               | MethodAttributes.Virtual, 
                               typeof(void), 
                               new Type[] { });

  ILGenerator g = methodBuilder.GetILGenerator();

  Type consoleType = typeof(Console);
  MethodInfo mi = typeof(Console).GetMethod("WriteLine", 
                                            new Type[] { typeof(string) });

  g.Emit(OpCodes.Ldstr, "Disposed!");
  g.Emit(OpCodes.Call, mi);
  g.Emit(OpCodes.Ret);

  return typeBuilder.CreateType();
}

static void Main(string[] args) {
  Type t = CreateBindableObject();
  using (IDisposable obj = (IDisposable)Activator.CreateInstance(t)) {
    Console.WriteLine("using object");
  }
}
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;I would imagine that RubyCLR will eventually support a syntax that looks like:&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;
class DisposableRubyObject
  implements IDisposable

  def dispose
    Console.write_line 'disposed!'
  end
end
&lt;/code&gt;&lt;/pre&gt;

	&lt;p&gt;where the &lt;code&gt;implements&lt;/code&gt; method is some syntactical sugar around &lt;code&gt;include&lt;/code&gt;.&lt;/p&gt;


	&lt;p&gt;This should make it much easier for me to support data binding scenarios. The current databinding stuff is all hard-coded, and this technique is far more flexible.&lt;/p&gt;</description>
      <pubDate>Wed, 29 Mar 2006 12:32:00 -0800</pubDate>
      <guid isPermaLink="false">urn:uuid:b564f797226ee132fc539e27e5a99d1f</guid>
      <author>jlam@iunknown.com (John Lam)</author>
      <link>http://www.iunknown.com/articles/2006/03/29/interface-implementation-in-rubyclr</link>
      <category>Thoughts</category>
    </item>
    <item>
      <title>"Interface implementation in RubyCLR" by Michael Trier</title>
      <description>&lt;p&gt;Would this allow me to implement something like this in Ruby:&lt;/p&gt;

&lt;p&gt;System.ComponentModel.IContainer components = new System.ComponentModel.Container();&lt;/p&gt;

&lt;p&gt;or is that functionality already baked in.  The reason I ask is because the current drop seems to be choking on it.&lt;/p&gt;</description>
      <pubDate>Thu, 06 Apr 2006 22:20:51 -0700</pubDate>
      <guid isPermaLink="false">urn:uuid:</guid>
      <link>http://www.iunknown.com/articles/2006/03/29/interface-implementation-in-rubyclr#comment-427</link>
    </item>
  </channel>
</rss>
