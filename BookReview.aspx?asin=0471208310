
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" >
<HTML>
  <HEAD>
    <title>Recommended book: EJB Design Patterns: Advanced Patterns, Processes, and Idioms
    </title>
    <meta content="JavaScript" name="vs_defaultClientScript">
    <meta content="http://schemas.microsoft.com/intellisense/ie5" name="vs_targetSchema">
    <LINK href="global.css" type="text/css" rel="stylesheet">
  </HEAD>
  <body MS_POSITIONING="GridLayout">
    <a href="Default.aspx">
      <img id="Image2" class="Logo" src="images/logo.png" alt="iunknown.com: building better software, faster" border="0" /></a>
    <form name="Form1" method="post" action="BookReview.aspx?asin=0471208310" id="Form1">
<input type="hidden" name="__VIEWSTATE" value="dDwxNzczMTIwMDYzO3Q8O2w8aTwxPjs+O2w8dDw7bDxpPDE+O2k8Mz47aTw1PjtpPDc+O2k8OT47aTwxMT47aTwxMz47aTwxND47aTwxNz47PjtsPHQ8cDxwPGw8SW1hZ2VVcmw7PjtsPGh0dHA6Ly9pbWFnZXMuYW1hem9uLmNvbS9pbWFnZXMvUC8wNDcxMjA4MzEwLjAxLl9TQ01aWlpaWlpaXy5qcGc7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPEVKQiBEZXNpZ24gUGF0dGVybnM6IEFkdmFuY2VkIFBhdHRlcm5zLCBQcm9jZXNzZXMsIGFuZCBJZGlvbXM7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPEZsb3lkICBNYXJpbmVzY3U7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPCQzNS4wMDs+Pjs+Ozs+O3Q8cDxwPGw8VGV4dDs+O2w8JDIzLjEwOz4+Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDw0LjU7Pj47Pjs7Pjt0PHA8cDxsPFRleHQ7PjtsPDM3Oz4+Oz47Oz47dDxAPGh0dHA6Ly93d3cuYW1hem9uLmNvbS9leGVjL29iaWRvcy9BU0lOLzA0NzEyMDgzMTAvcmVmPW5vc2ltL2l1bmtub3duY29tLTIwOz47Oz47dDw7bDxpPDA+O2k8MT47PjtsPHQ8QDxCb29rIERlc2NyaXB0aW9uOz47Oz47dDxwPHA8bDxUZXh0Oz47bDxBIGxvdCBvZiBwcm9ncmFtbWluZyBpbnZvbHZlcyBzb2x2aW5nIHRoZSBzYW1lIGtpbmRzIG9mIGJhc2ljIHByb2JsZW1zLiBXZWxsLCB3aGF0IGlmIGEgY29tbXVuaXR5IG9mIGV4cGVydHMgZ290IHRvZ2V0aGVyIGFuZCBwb29sZWQgdGhlaXIga25vd2xlZGdlIHRvIGNvbWUgdXAgd2l0aCB0aGUgYmVzdCBwcm9ncmFtbWluZyBwcmFjdGljZXMgZm9yIHNvbHZpbmcgdGhlc2UgcHJvYmxlbXM/IFlvdSB3b3VsZCBoYXZlIHdoYXQgYXJlIGtub3duIGFzIGRlc2lnbiBwYXR0ZXJucy5cPGJyXD4gICBBdXRob3IgRmxveWQgTWFyaW5lc2N1LCBhIGxlYWRpbmcgZXhwZXJ0IG9uIEVKQiwgd29ya2VkIHdpdGggdGhlIG1lbWJlcnMgb2YgdGhlIEVKQiBjb21tdW5pdHkgb2YgVGhlU2VydmVyU2lkZS5jb20gdG8gcHV0IHRoZWlyIGNvbGxlY3RpdmUga25vd2xlZGdlIHRvZ2V0aGVyIHRvIGJ1aWxkIGEgbGlicmFyeSBvZiBkZXNpZ24gcGF0dGVybnMsIHN0cmF0ZWdpZXMsIGFuZCBiZXN0IHByYWN0aWNlcyBmb3IgRUpCIGRlc2lnbiBhbmQgZGV2ZWxvcG1lbnQuIFRoaXMgdHJlYXN1cmUtdHJvdmUgb2YgcHJvdmVuIGJlc3QgcHJhY3RpY2VzIHdpbGwgYWxsb3cgZGV2ZWxvcGVycyB0byBxdWlja2x5IHNvbHZlIGRpZmZpY3VsdCBwcm9ncmFtbWluZyBhc3NpZ25tZW50cy4gVW5saWtlIG90aGVyIHBhdHRlcm5zIGJvb2tzLCB0aGlzIGJvb2sgZ29lcyBiZXlvbmQgaGlnaC1sZXZlbCBkZXNpZ25zIHRvIHRoZSBhY3R1YWwgY29kZSBmb3IgaW1wbGVtZW50aW5nIHRoZW0sIHNhdmluZyBkZXZlbG9wZXJzIGNvdW50bGVzcyBob3VycyBvZiB0aW1lIGFuZCBlZmZvcnQgd2hlbiBidWlsZGluZyBzY2FsYWJsZSwgcmVsaWFibGUsIGFuZCBtYWludGFpbmFibGUgRUpCIHN5c3RlbXMuOz4+Oz47Oz47Pj47Pj47Pj47PvztvD6/w+GIfIj508WPGPM6FDQB" />

      <div class="BookReview"><img id="BookImage" class="BookReviewImage" src="http://images.amazon.com/images/P/0471208310.01._SCMZZZZZZZ_.jpg" alt="" border="0" />
        <span id="BookReviewTitle" class="BookReviewTitle">EJB Design Patterns: Advanced Patterns, Processes, and Idioms</span>
        <div class="ItemDetail">By
          <span id="Authors">Floyd  Marinescu</span></div>
        <div class="ItemDetail">
          <span class="ItemCaption">List price:</span>
          <span id="ListPrice" class="ListPrice">$35.00</span>
          <span class="ItemCaption">Our price:</span>
          <span id="OurPrice" class="OurPrice">$23.10</span>
        </div>
        <div class="ItemDetail">
          <span class="ItemCaption">Average customer review:</span>
          <span id="AverageReview">4.5</span>
          based on
          <span id="TotalReviews">37</span>
          reviews.
        </div>
        <div class="BuyButton">
          <a href='http://www.amazon.com/exec/obidos/ASIN/0471208310/ref=nosim/iunknowncom-20'>
            <img id="Image1" src="Images/buy_from_amazon.gif" alt="" border="0" /></a>
        </div>
        <table class="ReviewBody">
          <tr>
            <td class="ReviewColumn">
              <table id="EditorialReviewsPanel" class="ReviewSection" cellpadding="0" cellspacing="0" border="0" width="100%"><tr><td>
	
                <DIV class="ReviewHeading">Book Description:</DIV>
                <span id="Label1">A lot of programming involves solving the same kinds of basic problems. Well, what if a community of experts got together and pooled their knowledge to come up with the best programming practices for solving these problems? You would have what are known as design patterns.<br>   Author Floyd Marinescu, a leading expert on EJB, worked with the members of the EJB community of TheServerSide.com to put their collective knowledge together to build a library of design patterns, strategies, and best practices for EJB design and development. This treasure-trove of proven best practices will allow developers to quickly solve difficult programming assignments. Unlike other patterns books, this book goes beyond high-level designs to the actual code for implementing them, saving developers countless hours of time and effort when building scalable, reliable, and maintainable EJB systems.</span>
              
</td></tr></table>
              <table id="CustomerReviewsPanel" class="ReviewSection" cellpadding="0" cellspacing="0" border="0" width="100%"><tr><td>
	
                <DIV class="ReviewHeading">Customer reviews:</DIV>
                
                    <div class="CustomerReviewSummary">One of my favourites...</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>13</span>
                      /
                      <span>13</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2002-04-07</span>
                    </div>
                    <span>I have already read a lot of books about best practices regarding <BR>J2EE and EJB development. In my opinion EJB Design Patterns from <BR>Floyd Marinescu is one of the best references for EJB Design Patterns <BR>which covers all important topics about Pattern-Driven EJB development.<P>Floyd is Principal at "The MIDDLEWARE Company" and one of the founders<BR>of TheServerSide, the reference Portal for the J2EE community.<P>The book involves standard patterns like the Session Facade and <BR>DTO (Data Transfer Objects) as well as extensions like a pattern <BR>for asynchronous communication (Message Facade) between a client <BR>application and the service layer in the middle tier.<P>The layered EJB architecture which includes the application, service,<BR>domain, and persistence layer are discussed in detail. Useful hints<BR>for the EJB development process and system design complete the book. <BR>The book is a good choice for EJB developers and enterprise <BR>architects.<P>One of the big advantages of the book are the chapters "From <BR>requirements to Pattern-Driven Design" and "EJB development with <BR>Jakarta Ant and unit testing with JUnit" which are dealing with <BR>the solution of real world problems.<P>The chapter about Entity Beans vs. Java Data Objects (JDO) is a <BR>must for every domain developer. <P>Floyd's book is well written and easy to understand for experienced <BR>developers and architects. The Java source code examples of the book <BR>are well documented and useful, if one desires a complete impression <BR>of EJB development.<P>To be honest, the book is one of the favourites in my bookshelf and <BR>I consult it whenever possible to learn more about that important <BR>technology.<P>The book also includes a nice poster that shows the EJB Design <BR>Patterns and an additional text to avoid pit falls. It's nice to <BR>stand in front of this poster and think about that great server <BR>side Java technology.</span>
                  
                    <div class="CustomerReviewSummary">Excellent Beginner Reference</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>0</span>
                      /
                      <span>0</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2003-10-13</span>
                    </div>
                    <span>A catalog of problem-solution patterns that pertain to J2EE. A great reference for beginners, instructing in some of the do's and don'ts of J2EE development. Much of the material presented has appeared on the Server Side, or in the J2EE core patterns from Sun, but this book presents the material in a concise easy to read format.<P>General Topics include: <BR>1. use of data transfer objects (DTOs)<BR>2. architecture mechanisms to help promote team development<BR>3. transaction and persistance patterns<BR>4. key generation<BR>5. code interaction patterns to help allevite performance bottlenecks.<BR>6. multi-tier architectures and how to optimize them.<P>There is also a short chapter on using JUnit and Ant to automate your environment, but they are so brief they really serve as more of a sales point to investigate these technologies rather than giving any real info on how to use them.<P>Probably the most useful chapter was the last one which covered a number of tips and tricks to make EJB development easier.<P>All in all as a beginner I got a lot of useful information out of this book. A seasoned developer will probably find a few things of interest, but will likely already know much of the material from the J2EE core patterns and personal experience.</span>
                  
                    <div class="CustomerReviewSummary">A book to be polished, condensed, extinguished...</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>3</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>1</span>
                      /
                      <span>1</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-02-13</span>
                    </div>
                    <span>Honestly, the book is not a bad book, it presents an interesting yet hard topic, how to design EJB (or in a broader sense, J2EE application) using design patterns. However, this book has a large intersection with Core J2EE Patterns, which not only includes more patterns (on all layers), but also is written in a more clear and comprehensive way.<P>Except the patterns presented in both books, (Session Facade, Data Transfer Object(DTO), DTO Factory(Assembler), EJBHomeFactory(Service Locator), Business Delegate...) the author introduced,<BR>"EJB Command" pattern, which in practice(IMO), has limited usage in server side enterprise application, since it distributes the business logic to command objects (usually the client) and thus will cause business rules duplication and more importantly, harder to change the rules later since its distribution;<P>"Generic Attribute Access and Data Transfer Hashmap" pattern, which is nothing but using map to transfer data. This again will suffer in distributed applications, since both clients and server have to agree on map key protocol and it is harder to add/change the keys later;<P>"Data Access Command" pattern, which derives from both command and data access object(DAO, presented in Core), not only will this pattern suffer the cons of command pattern usage in enterprise distributed application, but also potential complexity in command processing to make sure dead-lock situations, data integrity, and may end up with a lot of small customized command classes.<P>Even though the author mentioned the cons of these patterns clearly, I think the risk outweighs the benefit in an entry-mid level enterprise application design book which tries to teach designers how make a good design.<P>A few good things that were missed out by Core J2EE patterns are "Business Interface", "Version Number", "Dual Persistent Entity Bean", "Primary Key Generation". But these can be find somewhere else, particularly, "Version Number" and "Primary Key Generation" are more in the database/tranaction domain than EJB domain.<P>Chapter6 "From Requirements to Pattern-Driven Design" is supposed to be a case study, but is presented in a vague and not derived way to step through, it also lacks the normal iterative/refactoring design style, if everything is straightforward and in place to make a perfect design decision, then I would think the example would not be real. Though, I do like the author's layering style definition from Presentation, Application, Services, Domain, to Persistence.<P>Chaper7 is about development, building, testing, deployment process, it is totally irrelevant to the design pattern topic, and too short to be useful, and there are a lot of good books (instead of only one chapter) in the book store.<P>Chapter8 is about JDO, again, a single chapter would not make readers' day.<P>Chapter9 is good, it is about idioms, good practices vs. pitfalls in J2EE application design. However, the list is too short and does not provide how to refactor the bad design to good one compared with Core J2EE Patterns.<P>Overall, there are limited useful contents presented in this book, and I had feeling that a lot of stuff (unrelated) were stuffed in just to fill up the space to make it a decent-sized book. I would recommend Core J2EE Patterns over this one if you are interested in J2EE application using design patterns. Only one of these two books will stand last...</span>
                  
                    <div class="CustomerReviewSummary">My favorite technical book at the moment</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>5</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>0</span>
                      /
                      <span>0</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2004-02-01</span>
                    </div>
                    <span>The book is excellent. Gives you a very good insight not only on the role of EJBs in the modern J2EE architecture but the J2EE architecture itself. Terse but interesting and comprehensive.<P>I believe every J2EE programmer of a mid to senior level has to read it and understand the Chapter 6, which is kind of a recap of the book. I wish I worked in a team where every developer has read this book - it would be so much easier to communicate and build a well designed enterprise application.<P>I enjoyed this book better than "Bitter EJBs", although the latter is quite useful too. Now it is time to go for "Core J2EE patterns".</span>
                  
                    <div class="CustomerReviewSummary">unfortunate treatment of a relevant and interesting topic</div>
                    <div>
                      <span class="ItemCaption">Rating: </span>
                      <span>3</span>
                      <span class="ItemCaption">Helpful: </span>
                      <span>3</span>
                      /
                      <span>3</span>
                      votes <span class="ItemCaption">Reviewed: </span>
                      <span>2003-10-24</span>
                    </div>
                    <span>First thing first, I'll come to the review of this book but before that some advice for you... if you are a J2EE architect/developer you'd need to use the contents of this book time and again, but this book is so badly organized and fluffy one can hardly survive the frustration of reading it twice, so make notes the first time you take the pain of going thru this book... following are mine<BR> - the importance of DTOs have come down following EJB2.0 release<BR> - reduce network chattiness, consider following options<BR> -- Session facade: remember not to create a God class, group relevant functions together in each Facade<BR> -- Consider message facade for asynchronous processing of requests where an immediate response is not required<BR> -- consider Command pattern only for prototyping<BR> -- use HashMaps or Value objects for transferring Entity EJB data over indiv get/set methods<BR> -- use LocalHomes for Session Bean to Entity Bean comm<BR> - create a business interface, a superinterface which both the remote and the Bean itself can implement<BR> - strongly recommend RowSet (JDBC 2.0 optional/JDBC 3.0 core) for tabular data transfer<BR> - depending on requirement, strike a balance between Domain Data Objects (Entity EJB data copies) and custom data objects (what the customer wants to see in one shot), remember to make Custom DOs read only<BR> - consider Fast Lane Reader pattern, pretty neat... Consider JDBC for Reading pattern for read-only data<BR> - Dual Persistent Entity Beans, toggle between BMP/CMP EJB by modifying the deployment descriptors<BR> - skip Chapter 4, use 'Service Locator' pattern with caching option for locating and caching EJB homes<BR> - need to generate primary keys, mostly use UUID generation technique discussed in case database's sequences are not enough<BR> - Part 2 of the book is mostly fluff, it discusses everything but 'Best Practices for EJB design and Implementation', which coincidentally is the heading for part 2<BR> - using ANT and jUnit, you call them best practice? No, they are standard practices<BR> - model domain/persistence/services/clients in that order<BR> - in discussing alternatives to Entity EJBs author laudes JDOs too much, I suggest you check out the 'Hibernate' project, looks more intuitive than JDO (to me)<BR> - Chapter 9 (EJB design Strategies, Idioms and Tips) is actually pretty good, probably because this is the only chapter that's not fluffy, thank you Floyd<BR> -- don't use Composite Entity Bean Pattern, good suggestion Floyd<BR> -- field validation on Entity beans? Use (define and implement) get/set-XXXfield methods since you can't implement the get/set-XXX methods<BR> -- prefer scheduled updates to real-time computations<BR> -- Message Beans - use serialized classes to enable type checking<BR> -- call setRollbackOnly and NOT Rollback, when App exceptions occur<BR> -- limit parameters for EJB create, don't pass DTOs<BR> -- don't use XML as a DTO mechanism, good eye-opener for XML fans<P>Okay, now the review comes...<BR> <P>Many of us J2EE developers and architects alike encounter a large decision tree while architecting/modeling enterprise-class systems with the help of EJBs, it becomes very difficult to weigh all the options available and all the customized treatment of EJBs on different J2EE containers over and above the minimum req or what's provided in SUN's reference implementation, most of us recognize a need for performance improvement in this area and a need to recognize the best practices or patterns to be used to help solve the frequent and recurring problems. For this very reason this book 'could have' been such an invaluable asset to the J2EE community, but alas this should have remained a bulky chapter in Ed Roman's 'Mastering EJB (2nd Edition)' book, the content has been fluffed beyond repair in this book and that's the last thing one needs in a patterns book, keep it short and organized.<P>The Author has not found a way to organize the pattern contents in a logical manner, due to this most of the chapters look like one loooooong paragraph each, organize. Author defines and talks about patterns and antipatterns in the same tone. The code examples I gather would be helpful for beginners.<P>All in all, this book contains a lot of content I would not advise people to miss, but the book is not worth buying, download and read it from the website, theServerside.<P>In addition, I suggest<BR> - J2EE Design patterns: Deepak Alur et al<BR> - Design Patterns: Eric gamma et al... read it only if you are a pattern gung-ho</span>
                  
              
</td></tr></table>
            </td>
            <td class="ReviewSideBar">
              <div class="ItemCaption">Customers also bought:</div>
              
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0764543857'>
                      Expert One-on-One J2EE Design and Development (Programmer to Programmer)
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.9 based on 23 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=1930110952'>
                      Bitter EJB
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.7 based on 9 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0471417114'>
                      Mastering Enterprise JavaBeans (2nd Edition)
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.6 based on 60 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0596002262'>
                      Enterprise JavaBeans (3rd Edition)
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.5 based on 150 reviews</div>
                  </div>
                
                  <div class="SimilarItem">
                    <a href='BookReview.aspx?asin=0131422464'>
                      Core J2EE Patterns: Best Practices and Design Strategies, Second Edition
                    </a>
                    <div class="SimilarItemRatings">Rating: 4.8 based on 17 reviews</div>
                  </div>
                
              <div class="GoogleBookAd">
                <script type="text/javascript"><!--
                google_ad_client = "pub-8264790134546506";
                google_ad_width = 160;
                google_ad_height = 600;
                google_ad_format = "160x600_as";
                google_ad_channel ="4375045039";
                google_color_border = "CCCCCC";
                google_color_bg = "FFFFFF";
                google_color_link = "000000";
                google_color_url = "666666";
                google_color_text = "333333";
                //--></script>
                <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
                </script>
              </div>
            </td>
          </tr>
        </table>
      </div>
    </form>
  </body>
</HTML>
